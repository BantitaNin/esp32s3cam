/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 23.11.2023 19:49:54

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 368208;
#else
constexpr int kTensorArenaSize = 367184;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,120,120,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0037216455675661564, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[13] = { 13224, -25163, -32143, -21297, -21575, -21879, -27661, -30626, -26693, -24945, -27927, -28558, -30017, };
const TfArray<1, int> tensor_dimension2 = { 1, { 13 } };
const TfArray<13, float> quant2_scale = { 13, { 0.00042706614476628602, 0.00033276694011874497, 0.00026816112222149968, 0.00037782997242175043, 0.0003843828453682363, 0.0003503760090097785, 0.00029193254886195064, 0.0002429173473501578, 0.00028060271870344877, 0.0003051161183975637, 0.0002851680910680443, 0.00027875014347955585, 0.00026211011572740972, } };
const TfArray<13, int> quant2_zero = { 13, { 0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[13*1*1*32] = { 
  /* [0][0][][] */ 32,-27,78,-44,-34,64,19,-10,-18,-51,95,23,-79,-6,-9,-20,-48,21,30,-32,49,-23,-31,19,3,-74,-61,41,-55,50,127,-64, 
  /* [1][0][][] */ 34,67,20,58,-34,35,-127,64,62,-5,15,-85,92,-66,43,-71,5,-47,-54,-34,-16,68,-61,41,21,-74,-88,-13,62,-86,-36,22, 
  /* [2][0][][] */ -38,19,-62,-94,65,84,-127,-18,91,86,68,85,-87,-88,42,47,83,-56,-12,-120,13,117,68,8,34,26,-15,-70,73,81,-102,23, 
  /* [3][0][][] */ 36,85,9,56,-1,-36,-61,-18,-51,11,-1,-113,-64,-7,-63,-77,-4,-127,43,-35,37,86,-16,70,32,-8,-8,54,39,53,-39,-8, 
  /* [4][0][][] */ -36,-23,8,11,9,-69,-97,-18,28,-23,-59,-127,1,33,-56,11,35,-117,-69,40,82,53,-9,-52,-21,-55,23,-6,30,28,20,18, 
  /* [5][0][][] */ 65,-14,11,59,84,59,-89,24,-31,42,-107,9,-9,-10,82,-40,61,-41,6,69,48,5,-51,-57,-20,53,-34,19,41,-34,-127,32, 
  /* [6][0][][] */ 110,3,122,5,-72,-52,-33,19,-67,17,60,38,29,-35,-107,15,-11,-127,-9,-34,-41,-53,-114,-46,86,56,98,-36,37,4,-56,-16, 
  /* [7][0][][] */ -59,-17,-47,-53,-102,-100,-127,47,97,-25,5,-11,10,24,58,-120,-48,-101,-38,91,120,-29,-63,18,79,47,111,-104,-29,81,19,-56, 
  /* [8][0][][] */ -64,38,-44,96,-8,29,-60,91,84,-23,-34,44,-4,-19,17,-127,-3,-60,-86,68,17,27,-56,-69,40,77,93,-85,-2,-14,-50,70, 
  /* [9][0][][] */ -61,3,-15,-47,-84,81,-93,17,-28,38,-53,70,24,-84,-40,-33,19,-127,-46,-50,104,-10,-29,59,-26,-81,43,44,-17,47,-121,-16, 
  /* [10][0][][] */ 21,103,-28,70,64,106,-127,-63,-5,32,-36,41,37,10,-31,2,3,-106,-93,36,-89,102,-59,-19,10,-91,108,48,-17,60,-85,68, 
  /* [11][0][][] */ 68,7,-65,-72,-12,25,-127,-25,-61,76,50,-18,77,-84,-13,-71,45,-45,74,-59,75,-33,-53,110,93,-8,-94,-126,45,-63,18,43, 
  /* [12][0][][] */ -54,102,-95,70,23,-51,-100,-6,-53,-74,-39,-43,88,-66,79,104,30,-81,-80,9,8,-11,-25,90,42,56,29,-127,-74,79,0,4, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 13,1,1,32 } };
const TfArray<13, float> quant3_scale = { 13, { 0.0051751923747360706, 0.0040324735455214977, 0.0032495795749127865, 0.0045785480178892612, 0.0046579558402299881, 0.0042458605021238327, 0.0035376420710235834, 0.0029436752665787935, 0.0034003471955657005, 0.0036974006798118353, 0.0034556703176349401, 0.0033778976649045944, 0.0031762532889842987, } };
const TfArray<13, int> quant3_zero = { 13, { 0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 259, 1, 167, -173, -313, 438, 947, 355, -312, -617, 691, 153, 148, 237, -413, 10, -126, 1064, -324, 335, 632, 179, 91, 107, 359, -355, 388, 727, -115, 94, 991, 55, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 7.104829273885116e-05, 7.6071606599725783e-05, 5.5701337259961292e-05, 4.408193490235135e-05, 5.2876966947223991e-05, 4.5092871005181223e-05, 0.00011442111281212419, 6.1425038438756019e-05, 4.5629909436684102e-05, 5.013718327973038e-05, 7.0703579694963992e-05, 6.1795937654096633e-05, 6.3380961364600807e-05, 6.4056650444399565e-05, 4.8590052756480873e-05, 4.7613932110834867e-05, 6.447071791626513e-05, 7.8320641478057951e-05, 4.2650070099625736e-05, 5.0498823839006945e-05, 4.8479669203516096e-05, 5.8454093959880993e-05, 0.00011821641237474978, 5.8717429055832326e-05, 8.0839279689826071e-05, 4.4945460103917867e-05, 7.052542787278071e-05, 9.8622462246567011e-05, 3.9668859244557098e-05, 4.7003482904983684e-05, 0.00012432102812454104, 6.4233092416543514e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -22,-20,69,9,65,-10,-47,-36,51,-73,-58,10,41,1,-9,41,-28,-11,-34,-16,-25,-62,10,79,-67,-8,57,-25,68,5,-13,-49,63,-34,-63,35,-56,-43,-48,27,50,-45,-39,76,31,-51,75,-3,21,-35,-21,63,-37,-22,-50,65,0,50,84,-59,-38,57,-28,29,1,14,61,65,34,71,63,-73,70,-54,34,59,-60,26,-40,28,39,19,127,14,-30,-14,-41,79,34,107,2,-58,16,51,54,17, 
  /* [1][0][][] */ -36,28,-39,-5,-17,52,31,-5,39,-83,-58,57,38,-27,-2,41,69,-17,3,73,-56,-17,27,18,5,-10,-25,68,9,6,54,-32,28,62,-12,6,36,9,-11,-28,-39,11,-30,-50,-16,15,-28,-26,-8,-90,58,38,8,55,-61,-25,2,62,31,50,-25,71,-33,-45,-33,24,39,27,62,3,-4,-32,-63,34,-25,31,54,-30,-40,46,-48,47,-59,-127,23,72,-39,-35,17,12,52,15,14,40,-40,-50, 
  /* [2][0][][] */ 39,28,-54,72,-15,-54,77,88,-54,72,-25,85,64,-24,71,-89,-53,-12,47,47,-38,-17,86,12,13,68,78,-4,-70,58,57,67,-38,-18,-87,-83,-70,82,81,-20,-74,-62,38,5,-48,101,-31,-64,101,62,84,-66,-41,42,43,-7,-44,70,-58,-5,-14,44,-6,52,62,37,46,66,-81,70,11,-22,25,-47,23,25,-51,-24,13,5,25,-69,57,45,-7,-79,-6,-22,83,127,-21,4,-3,-54,57,-13, 
  /* [3][0][][] */ 73,2,35,-24,-67,53,-105,39,41,-6,65,9,93,90,63,10,106,102,-68,15,79,-86,-66,-108,-31,-119,-76,105,45,-96,85,11,-73,-33,-18,-17,-89,-31,41,52,-20,-87,-125,4,74,30,-44,-78,74,-121,18,5,91,32,92,-95,-121,-110,-114,-55,-91,39,-33,73,55,-33,-56,-27,-31,-68,2,66,26,-125,58,-47,34,78,58,-60,-95,-115,8,61,33,46,-43,-112,-106,9,1,-104,72,-90,-127,9, 
  /* [4][0][][] */ 31,76,-7,38,-25,-25,22,9,41,74,-13,38,16,-39,-17,-59,-28,-6,-54,14,78,-83,71,18,-17,-8,47,-55,-46,23,-59,-53,52,85,9,-93,-38,-8,-97,37,-47,-53,-64,-75,33,79,23,38,19,-37,-22,-68,-74,30,-70,13,21,-81,24,4,0,-63,-36,-55,-44,38,-5,-36,12,-81,-84,-71,-47,14,77,38,43,-11,-11,-52,-1,-47,-80,-93,-6,52,68,-2,-97,-64,29,32,21,72,-127,-14, 
  /* [5][0][][] */ 95,-82,70,78,53,-118,55,46,91,-90,5,-70,18,78,23,41,65,65,-64,114,15,50,38,-27,-78,-48,-16,-80,55,39,19,-100,-58,-9,-45,-1,-101,-39,49,46,-62,-47,55,99,-71,16,22,-45,-105,97,30,20,54,19,42,-24,108,60,-41,-47,39,-56,39,-41,-34,91,-29,26,67,3,94,-62,-40,79,-20,-59,18,-20,3,84,102,6,9,90,-69,79,0,34,72,-99,105,85,15,6,127,-48, 
  /* [6][0][][] */ 36,1,43,40,-20,-8,24,22,18,40,12,-40,33,33,49,-45,16,35,44,52,16,-23,65,18,49,34,-7,-11,-6,-39,39,-19,-13,-30,10,-27,-2,21,-38,36,90,39,32,3,7,38,-37,-22,9,62,32,-14,29,-20,50,-4,21,-1,-25,37,-27,5,108,0,-18,44,38,-14,38,15,-20,61,22,-16,-32,5,-27,-24,44,-10,20,16,62,38,-30,-29,22,-36,56,63,43,8,24,-23,127,30, 
  /* [7][0][][] */ 87,68,-18,-35,-31,70,-5,37,77,-18,-54,13,46,-58,38,66,43,21,-11,88,40,37,8,66,-53,53,42,48,-36,96,-2,18,-3,19,61,81,-65,76,21,-11,63,-51,37,53,39,6,94,-64,43,-64,-80,-46,2,66,13,20,87,-54,23,-35,13,-2,55,-71,-33,-35,74,22,-69,9,41,54,70,16,56,47,-39,42,-61,46,74,-38,-110,-76,74,29,-75,72,104,52,70,51,-54,-24,-127,-55, 
  /* [8][0][][] */ 10,35,-55,-106,76,14,-55,-30,-11,33,26,65,-11,-78,-96,-81,-76,88,-64,19,21,-54,87,98,-126,79,24,65,-79,2,-91,100,78,-34,44,-21,97,-8,-47,66,66,103,-92,-114,15,-39,-50,88,18,-84,-60,-13,-69,-19,-59,-112,0,94,-118,88,98,33,30,103,-38,-47,-22,84,-94,38,-12,5,51,63,-5,8,-53,82,88,60,22,76,-127,-65,13,28,63,-55,35,-40,-98,86,-83,-114,-125,64, 
  /* [9][0][][] */ -14,8,85,14,65,-105,-48,-102,2,20,-11,35,-33,-90,-107,-21,-6,1,-108,-79,-28,66,-116,-93,61,-24,-13,16,-23,-56,-88,73,32,-10,3,-35,-80,-8,-39,-47,30,-70,19,-79,48,14,-99,36,36,-35,-85,-56,56,-67,-78,71,58,-56,-18,-4,-86,84,54,-79,-86,-6,84,36,-56,67,69,-96,2,52,-91,-93,-72,-127,-60,80,9,-2,66,7,-40,-91,10,-20,73,3,-39,86,76,-15,38,-56, 
  /* [10][0][][] */ -6,58,59,-35,18,64,77,22,41,27,34,-42,64,62,7,7,-21,53,-25,-24,30,39,44,-41,27,55,-67,-69,-14,52,-38,-44,63,64,113,62,-25,40,-16,32,-6,73,-43,-28,-67,-36,0,-33,5,43,46,3,45,14,-27,-12,-60,-6,18,-24,-1,48,82,49,81,-47,-45,-13,22,1,-45,2,47,93,-49,68,-10,64,99,14,56,11,64,127,-62,44,83,-17,26,11,-2,-42,-21,-30,48,-5, 
  /* [11][0][][] */ 69,14,-5,76,86,40,42,17,60,65,-48,83,-2,-75,1,-49,-34,-72,44,42,-1,37,40,-68,-127,-67,-32,55,54,-17,18,-8,-42,-42,38,29,-31,55,-19,-43,-15,83,-75,13,-11,-40,-76,-54,52,68,79,42,-62,-55,14,22,-51,-31,-15,-56,-51,68,55,9,28,66,-37,23,67,46,-97,-50,17,65,-73,38,-42,32,-53,65,-70,-11,-68,-60,34,-47,5,-11,-87,-10,7,-67,-62,-28,-43,-33, 
  /* [12][0][][] */ -6,63,-31,-5,71,-8,-32,29,-44,3,9,18,-22,13,40,-32,-55,-20,-67,-53,-3,7,5,74,-43,-59,93,-56,87,39,-25,71,-114,-63,-20,33,7,-69,13,39,68,8,-87,-28,-56,-50,-6,99,-32,-127,-65,76,45,7,-71,45,3,-26,60,55,54,77,-11,35,92,10,-17,87,45,50,43,2,74,54,11,-2,-10,46,-92,-47,-27,29,22,-27,-7,30,30,89,-68,-87,75,30,29,9,-49,-13, 
  /* [13][0][][] */ 59,-43,85,82,49,86,49,43,85,-67,1,-6,70,63,75,-25,-73,-50,-52,24,88,-4,58,-19,17,29,4,24,-71,-68,53,37,51,78,-22,29,-51,-22,7,34,-44,59,-5,27,2,32,-7,-15,18,84,-31,-52,-75,25,61,-50,-53,22,-17,-31,-6,84,-50,0,-39,-33,-56,75,-18,4,85,17,-60,11,-45,-13,-60,39,127,-18,49,-42,79,67,-52,-41,69,120,19,41,-23,49,76,22,70,5, 
  /* [14][0][][] */ -53,-89,74,50,65,-30,-21,-101,-93,-44,56,69,-30,-80,-93,-79,-52,-55,-1,10,-76,13,-7,52,-127,-71,-32,24,-104,-108,-72,29,83,-24,-33,-4,80,94,27,-101,-21,-105,24,76,55,-103,59,-79,101,6,58,40,81,-19,-27,7,-59,3,40,82,-21,-76,-58,58,-88,-14,66,-100,-88,-107,-99,71,1,62,40,-76,46,-120,29,26,33,-34,-114,-66,-105,-93,-103,86,92,-7,74,-51,55,50,-53,24, 
  /* [15][0][][] */ 24,-25,-25,83,90,-65,40,-104,77,10,-64,25,108,62,-54,-103,80,14,-38,32,80,75,70,101,98,81,53,84,33,57,65,-87,10,11,-17,30,-45,98,109,-53,17,93,-34,-29,-6,-71,-4,-67,19,-27,15,31,-84,-87,-31,0,104,47,-15,95,-44,-56,27,93,-12,84,-75,0,-41,42,118,-50,25,-7,54,-100,-1,97,94,73,-66,47,8,-71,-114,-29,-68,33,59,71,-91,-36,56,127,89,103, 
  /* [16][0][][] */ -53,17,74,-45,36,87,-29,25,33,12,-71,50,-3,-40,-46,-34,81,58,13,50,58,42,-8,45,-28,7,-41,54,-62,15,27,13,-72,61,31,24,-10,10,-35,-39,-10,-15,29,70,48,75,76,-1,-35,-116,-5,83,-20,88,26,35,15,67,59,15,83,81,11,40,46,22,-31,66,34,44,-21,-46,27,45,45,62,1,81,-109,-2,11,-58,44,-68,16,79,63,11,43,4,-8,84,33,-24,-127,-18, 
  /* [17][0][][] */ 57,-41,24,49,31,-67,-25,-62,21,29,56,22,64,49,-45,33,14,50,91,95,-3,12,76,-22,68,120,-36,30,78,-20,60,38,-5,1,97,12,-21,61,-47,0,7,-4,40,-5,17,23,66,-62,62,117,66,4,7,44,51,-16,-69,49,-34,-61,15,-51,48,127,-32,-26,24,-52,-51,2,72,117,15,-25,-30,39,72,0,122,-25,20,12,21,24,-59,43,105,-19,96,89,-46,-58,30,52,113,41, 
  /* [18][0][][] */ -93,92,103,-72,-16,-118,-113,1,-4,85,-115,-52,-43,52,56,-65,15,-32,64,-29,111,-41,18,-87,58,-74,-23,104,23,26,-5,35,41,-34,-111,-113,-40,77,-40,55,-41,-7,-53,-17,-120,11,29,-8,11,86,67,21,-116,-17,2,82,-41,27,-23,-125,77,102,8,30,-74,-127,-35,82,62,-76,-70,110,-105,-29,-95,-113,48,45,1,-80,-62,-9,-19,-71,96,-40,69,62,-90,-63,-66,99,96,-62,95,46, 
  /* [19][0][][] */ 10,20,82,48,39,-81,64,120,87,-99,38,18,-65,30,-31,72,71,-73,70,61,-13,66,-58,31,63,-113,45,-56,-84,-91,-43,37,71,-60,11,-11,15,-44,-22,-88,2,-91,-42,35,-46,57,97,-64,-19,17,-44,44,-17,19,19,-4,-21,92,20,-7,56,-35,71,40,-51,3,10,17,-4,70,79,-49,-27,-100,-24,-56,-12,-121,8,106,65,-86,-59,43,-58,6,13,24,127,68,20,75,-43,124,-41,-49, 
  /* [20][0][][] */ 10,74,82,106,-67,108,31,38,22,14,-60,22,9,101,40,-49,-24,-21,-53,-29,26,-27,-61,-51,81,-59,-78,60,41,26,-15,125,94,59,-26,82,49,-2,-7,-98,-66,-7,-104,-85,-1,-43,-47,114,54,-105,-81,59,54,117,58,18,127,77,90,99,115,-32,-40,-18,-4,-42,-39,31,-52,-82,-56,73,-45,-62,38,34,117,40,80,113,93,36,3,-49,72,121,-1,74,-5,53,44,72,27,38,-92,17, 
  /* [21][0][][] */ 66,73,61,-74,87,-38,101,-4,-4,-62,-62,32,4,-3,-62,-63,-60,-16,7,10,52,-77,77,-49,13,-96,-42,69,5,-3,-30,2,31,30,-105,-108,91,22,-115,-7,-30,39,-16,12,-42,-70,-98,74,-7,-91,-15,81,29,68,-112,29,-79,54,-52,103,60,-37,9,-16,56,39,-39,-38,-73,-9,1,22,15,-48,51,66,-67,-40,16,90,8,96,-4,-66,31,-51,36,-46,-127,44,78,-73,-58,-60,-26,-67, 
  /* [22][0][][] */ 19,-17,-28,-34,34,-21,40,21,-12,49,-26,-40,41,-32,-29,-35,11,31,-1,-16,99,-2,24,11,67,20,-43,33,-19,-30,-22,-41,22,23,23,3,1,46,-18,-40,9,-4,58,33,21,-36,30,-8,-16,49,13,-9,-23,-37,-3,14,26,-13,-6,-13,37,-31,53,-39,-24,8,-37,-19,41,56,11,40,-27,102,20,-33,11,3,44,34,39,-39,17,-29,25,30,50,-12,-9,32,-26,22,86,9,77,127, 
  /* [23][0][][] */ 47,-55,11,46,87,-66,18,-127,34,-62,65,52,15,-73,-1,-27,78,-32,-77,63,41,-57,73,-24,-13,-9,60,30,79,44,58,-12,-43,35,11,51,80,-16,-101,12,-74,8,-28,-93,-64,-77,67,27,49,-99,-65,-22,63,-33,-44,77,-16,-8,65,43,-70,-59,-35,-2,35,35,-112,-77,60,-51,73,-75,-13,-28,-32,-61,47,3,53,90,-36,-30,-29,-90,77,14,80,-22,-117,-42,78,-8,71,-48,-23,39, 
  /* [24][0][][] */ -39,-14,-41,-26,-43,-50,-39,-23,45,-13,60,39,73,43,-7,-48,-30,28,-4,-22,59,-33,-29,-9,4,-67,54,41,68,44,14,-21,4,16,13,27,-16,-31,54,-1,-62,-45,14,15,24,-9,37,53,-47,-65,-16,20,49,46,44,-32,-8,54,24,14,62,10,24,44,-38,63,-3,-36,-40,29,-23,-40,-10,22,64,64,45,-54,-65,-31,-29,-43,-64,-110,15,45,-1,-39,12,-42,15,-29,-56,28,-127,-18, 
  /* [25][0][][] */ -76,-55,-79,-17,67,-66,-112,50,28,-104,-55,11,69,32,-127,-37,-78,49,33,-117,61,67,-3,-64,4,-48,-116,32,55,-110,32,109,109,-93,25,50,90,-78,-34,-35,-83,94,-113,-2,110,28,84,26,-108,60,-75,-2,19,-26,-71,16,-34,38,-99,70,101,33,48,23,-5,79,-28,-14,-88,-46,-20,-110,22,-110,53,11,58,39,12,11,37,55,-43,15,-80,-50,-99,-98,-33,-61,100,16,-116,-26,-1,-103, 
  /* [26][0][][] */ 41,-74,4,13,-78,9,-22,26,-49,-127,83,77,-32,-6,27,8,83,26,-55,-46,17,64,48,14,15,9,26,32,9,20,-58,14,-13,-26,-72,-50,-31,72,5,69,-66,59,23,39,-27,64,-6,79,-12,-9,-16,76,15,-15,30,-58,75,50,49,28,16,-42,47,-34,77,-2,-13,50,-37,73,75,41,71,-62,-34,20,39,-103,-67,22,-4,52,18,-86,65,9,-23,27,-46,93,25,26,-48,98,-44,30, 
  /* [27][0][][] */ 38,5,-18,-25,-36,-16,-1,-20,28,69,16,-36,-4,34,38,-8,37,13,58,-18,-24,9,8,-1,-14,60,-47,10,34,14,-3,12,48,43,-25,-30,-29,-18,-56,49,-1,34,84,18,57,19,28,52,65,61,46,-23,-29,-30,19,4,55,0,-41,-26,-17,-15,5,58,22,-11,-55,57,28,22,-41,67,34,14,2,-23,31,-17,59,53,48,20,127,39,-23,-26,19,17,-17,0,-5,-10,77,10,114,81, 
  /* [28][0][][] */ 94,-7,92,47,-126,-72,-108,-85,-45,-120,61,73,-89,-95,-1,106,97,117,-83,77,-35,23,-116,-84,-127,84,-95,-66,-82,-86,-4,-23,-105,15,85,73,23,-121,-48,31,107,43,-106,53,-119,-15,12,48,19,-73,-90,-42,-95,22,50,42,59,-16,86,53,-13,-48,-109,3,59,77,-28,85,-89,31,-116,-48,73,35,-8,-111,-127,-70,-97,47,-83,-103,112,-35,64,-125,75,-95,-115,-76,-42,-74,-49,50,-108,-78, 
  /* [29][0][][] */ 53,37,57,-29,-84,33,-110,-16,95,-4,-80,-77,100,-76,-46,-46,-82,91,38,-74,-74,-31,36,0,-24,21,-42,-26,-97,-11,99,16,61,12,-99,-22,-8,116,-9,76,51,107,-48,73,18,93,-55,-20,14,9,68,-73,53,-82,127,49,-41,48,-61,102,-103,95,-64,-49,-52,-54,39,86,99,-66,37,-65,101,72,49,27,110,-93,-52,28,-5,-52,-39,-104,61,106,39,66,-92,44,68,73,-88,26,54,48, 
  /* [30][0][][] */ 32,-9,-13,17,19,7,29,-7,41,61,10,-17,-30,17,35,5,-4,56,69,-18,46,-27,10,2,14,87,-20,41,6,-37,34,7,-17,-14,-12,-4,0,8,2,9,76,11,50,35,73,-9,38,19,-10,117,88,-39,37,-19,15,42,-18,-19,-32,-18,-38,-2,37,59,-35,-24,-21,37,-17,38,24,88,-28,59,20,-24,-21,-28,66,-18,16,26,17,17,-33,10,26,33,1,-27,32,16,40,2,127,28, 
  /* [31][0][][] */ 52,-49,31,66,27,43,-30,-46,-22,-27,-45,-53,75,-93,-39,87,-31,-47,15,47,29,16,-3,80,18,-96,30,37,-53,-42,29,74,7,22,-55,-44,77,-40,-32,-54,38,-36,-28,45,11,-31,-21,23,54,0,48,-19,-65,-27,-66,22,-127,59,21,83,-15,10,55,-51,46,86,-25,-44,52,-81,-82,-11,-50,-35,15,12,-31,-41,36,71,-49,-39,12,4,50,76,-55,28,37,-13,-53,-24,-13,65,-81,-29, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0030195524450391531, 0.0032330432441085577, 0.0023673067335039377, 0.0018734821351245046, 0.0022472711279988289, 0.0019164469558745623, 0.0048628970980644226, 0.0026105639990419149, 0.0019392711110413074, 0.0021308301948010921, 0.0030049020424485207, 0.0026263273321092129, 0.0026936908252537251, 0.0027224074583500624, 0.0020650771912187338, 0.0020235921256244183, 0.0027400054968893528, 0.0033286272082477808, 0.0018126280046999454, 0.002146200044080615, 0.002060385886579752, 0.0024842990096658468, 0.0050241975113749504, 0.002495490713045001, 0.0034356694668531418, 0.0019101819489151239, 0.0029973306227475405, 0.0041914544999599457, 0.0016859264578670263, 0.0019976480398327112, 0.0052836434915661812, 0.0027299062348902225, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 760, -87, 2286, 3116, 1568, -1200, 2214, -699, -1467, 86, 2503, -1436, 1709, 3046, 1193, 1545, -468, -262, -686, 2793, 1381, -227, 1421, -270, -520, 2462, 830, 1333, 2746, 1498, 1734, 607, 753, 2054, 2143, 1669, -363, 1903, 1750, -1924, -151, 786, 199, 819, -648, 221, -619, 757, -3565, 1414, 676, -2097, 3472, -498, 1531, 705, 645, 1609, -311, -992, 217, 851, 186, 2162, 3600, 1462, 1275, 3056, 2554, -377, 1808, 3906, 1977, -817, 3504, 4635, 656, -1622, 719, 863, 4243, 1370, 112, -780, 1001, 477, 609, -1200, 1528, -48, 2411, 520, 224, -1844, 1129, 1110, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00028682861011475325, 0.0004607971350196749, 0.00025938719045370817, 0.00025096445460803807, 0.00038531524478457868, 0.00032658132840879261, 0.00028870147070847452, 0.00030277392943389714, 0.0002919851103797555, 0.0004512755258474499, 0.00025903002824634314, 0.00029900413937866688, 0.00033285969402641058, 0.00021643609215971082, 0.00028870112146250904, 0.00025477915187366307, 0.00027656211750581861, 0.00036339982762001455, 0.0003254869079682976, 0.0002274955331813544, 0.00027724381652660668, 0.00034578502527438104, 0.00024488390772603452, 0.0004137777432333678, 0.00042917599785141647, 0.00031092681456357241, 0.00028771828510798514, 0.00024915154790505767, 0.00027548256912268698, 0.00030309951398521662, 0.00029486202402040362, 0.00038878378109075129, 0.0004180903488304466, 0.00030935800168663263, 0.00030661810887977481, 0.00030789867741987109, 0.00030226295348256826, 0.000262647052295506, 0.00021837187523487955, 0.00027447161846794188, 0.00036374235060065985, 0.00026146334130316973, 0.0003844427119474858, 0.00034453341504558921, 0.00037021978641860187, 0.00032462525996379554, 0.00038532607140950859, 0.00023412480368278921, 0.00019725093443412334, 0.00030218902975320816, 0.00041715317638590932, 0.00022181034728419036, 0.00021864638256374747, 0.00026609358610585332, 0.00028036246658302844, 0.00032419606577605009, 0.00033733027521520853, 0.00026879820507019758, 0.00042067829053848982, 0.00028830868541263044, 0.00036878450191579759, 0.00026111814077012241, 0.00041537356446497142, 0.00030642570345662534, 0.00019016870646737516, 0.00031070865225046873, 0.00030507994233630598, 0.00024159000895451754, 0.00025524233933538198, 0.00034283017157576978, 0.00028145330725237727, 0.00019460350449662656, 0.00024188416136894375, 0.00031034927815198898, 0.00019640092796180397, 0.00017681934696156532, 0.00020944018615409732, 0.00036564335459843278, 0.00025668638409115374, 0.00028326836763881147, 0.00021392120106611401, 0.00022512605937663466, 0.00031612356542609632, 0.00035886780824512243, 0.00021636892051901668, 0.00030364003032445908, 0.00043520101462490857, 0.00029780642944388092, 0.00046798703260719776, 0.00045576892443932593, 0.00025543922674842179, 0.00044481788063421845, 0.00027551566017791629, 0.00020631980441976339, 0.0003146604576613754, 0.00028360378928482533, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -5,98,-92,33,58,-25,102,79,-72,-7,40,-87,89,127,-67,24, 
  /* [1][0][][] */ -20,1,-67,0,-21,43,16,-127,35,-37,-22,-55,-3,-36,-29,-3, 
  /* [2][0][][] */ -17,-30,28,68,27,48,-103,127,-13,-6,80,-57,-14,-69,-29,71, 
  /* [3][0][][] */ 98,-99,81,-17,3,-36,-38,127,-39,63,70,56,-8,61,2,15, 
  /* [4][0][][] */ -40,-21,1,45,-69,6,-22,-127,-4,-7,28,-11,29,41,87,88, 
  /* [5][0][][] */ 127,23,-36,-24,-76,31,24,72,13,-11,58,87,121,24,-81,5, 
  /* [6][0][][] */ 25,-46,-69,-68,-57,15,-1,-59,-74,-71,-16,49,90,42,127,1, 
  /* [7][0][][] */ -60,27,-36,-84,8,-59,-82,16,-96,47,-68,-63,-127,-37,9,92, 
  /* [8][0][][] */ 46,45,75,12,46,14,74,0,71,-30,35,-1,-127,-20,-66,4, 
  /* [9][0][][] */ -47,57,31,-67,-13,-5,39,-17,-42,57,-21,28,45,127,14,39, 
  /* [10][0][][] */ 77,57,-41,54,-26,-17,31,-44,-80,-31,-58,-101,-127,-72,7,93, 
  /* [11][0][][] */ 51,0,48,-5,-6,-20,10,96,-82,17,-22,8,-5,-11,54,127, 
  /* [12][0][][] */ -45,-23,10,3,4,6,127,23,-62,22,12,-11,4,68,-40,92, 
  /* [13][0][][] */ 22,17,9,53,127,57,112,84,-53,84,-54,-36,44,66,-108,-6, 
  /* [14][0][][] */ -114,126,-12,-15,12,17,57,-9,-65,34,127,8,-100,20,-54,57, 
  /* [15][0][][] */ -39,-15,-127,-59,92,-62,-102,-36,-29,-30,-32,-87,-18,-81,-55,51, 
  /* [16][0][][] */ 127,-24,17,-24,38,-36,42,-25,-56,9,123,57,62,-2,-55,29, 
  /* [17][0][][] */ 12,21,-23,-101,-23,-65,125,-127,12,-23,-52,29,38,83,9,45, 
  /* [18][0][][] */ 15,107,-9,-41,46,-73,-11,-48,-30,127,-26,-8,-21,57,-8,-29, 
  /* [19][0][][] */ -85,-127,117,-85,38,-117,25,-75,33,25,84,99,39,-16,66,-31, 
  /* [20][0][][] */ -15,92,55,11,8,-1,25,-26,63,-12,90,-32,-127,-22,-68,-16, 
  /* [21][0][][] */ -67,35,23,-8,71,13,52,48,-127,53,-47,16,-26,16,-71,-16, 
  /* [22][0][][] */ 13,-80,52,17,7,-127,108,-13,24,-63,-48,-74,36,-74,-45,-64, 
  /* [23][0][][] */ -68,-92,46,43,26,-38,14,-57,24,-38,59,-2,-10,69,70,127, 
  /* [24][0][][] */ 9,4,22,86,47,17,-57,-127,68,18,-44,13,-5,4,-21,-27, 
  /* [25][0][][] */ -46,17,19,-75,-20,21,30,-25,-46,80,-22,9,55,127,15,18, 
  /* [26][0][][] */ -75,88,7,17,33,-99,-16,-48,20,25,1,70,0,4,-84,127, 
  /* [27][0][][] */ -15,-127,-55,5,-67,103,3,-59,20,-39,61,-37,37,-49,-109,-21, 
  /* [28][0][][] */ -21,1,29,69,25,2,-32,-127,-100,43,80,-8,60,4,-40,-19, 
  /* [29][0][][] */ -115,106,-29,-4,-24,33,-127,-109,-60,-23,1,9,21,-70,-114,66, 
  /* [30][0][][] */ 64,79,-49,82,-117,-88,-72,-20,-35,-10,5,-114,127,35,-6,85, 
  /* [31][0][][] */ 127,36,-86,-29,-61,29,83,53,-57,-12,56,38,34,29,-20,8, 
  /* [32][0][][] */ -19,-31,127,-6,-21,91,106,53,2,-22,4,23,23,68,86,53, 
  /* [33][0][][] */ 15,12,-70,-33,-28,48,127,8,-13,-25,40,-50,120,105,-37,50, 
  /* [34][0][][] */ -94,-30,87,36,20,-52,114,-29,-127,39,45,-42,60,50,-46,-36, 
  /* [35][0][][] */ 2,4,-57,37,-62,120,-28,-60,-32,127,11,88,-44,51,8,44, 
  /* [36][0][][] */ -4,-98,127,-40,-61,27,-34,0,17,14,-46,87,20,-100,-40,47, 
  /* [37][0][][] */ 99,-7,68,-44,119,-61,-59,46,-72,127,-63,11,-89,-44,91,-17, 
  /* [38][0][][] */ 57,57,20,-85,-6,-49,-109,54,-92,81,-109,-55,-81,-115,-127,66, 
  /* [39][0][][] */ -76,29,-54,-38,-82,-82,60,24,-127,-33,14,82,21,6,0,46, 
  /* [40][0][][] */ 127,31,4,-93,-89,27,15,-40,-36,-31,-47,-95,17,52,53,35, 
  /* [41][0][][] */ 107,-72,-60,-47,-10,-4,-67,-9,69,-19,-1,-61,127,-68,62,-38, 
  /* [42][0][][] */ -10,-99,-52,127,8,-91,-113,27,7,-10,21,57,-72,71,-63,-1, 
  /* [43][0][][] */ -81,-24,-25,-127,-43,-5,-5,76,37,-104,-39,26,-29,-31,-22,82, 
  /* [44][0][][] */ -36,42,40,-45,-31,-26,38,124,127,-88,80,110,124,52,-19,1, 
  /* [45][0][][] */ 35,83,-72,69,127,-90,-55,-38,114,-74,63,-67,-33,16,-76,63, 
  /* [46][0][][] */ -33,-49,14,-8,110,-38,28,-3,-11,125,-28,-127,38,61,-55,87, 
  /* [47][0][][] */ 92,-57,-54,-7,94,-1,-32,-47,-14,118,-14,44,7,-127,-91,27, 
  /* [48][0][][] */ 13,27,-15,-125,-8,-53,127,-120,12,11,-38,54,60,66,9,40, 
  /* [49][0][][] */ 6,127,-83,62,61,4,75,58,-45,21,77,-44,-14,44,108,-74, 
  /* [50][0][][] */ 16,39,-20,-1,-127,0,-66,-55,56,58,28,30,-35,-37,6,31, 
  /* [51][0][][] */ 127,-48,-56,-37,-38,95,-96,-48,41,-22,-38,77,-32,-81,-10,53, 
  /* [52][0][][] */ 0,-52,31,84,-41,-87,-127,-31,-69,-50,-25,-58,30,-74,-3,83, 
  /* [53][0][][] */ 19,80,41,-104,14,99,76,-36,-18,-35,4,-31,100,-127,-3,62, 
  /* [54][0][][] */ 42,98,-1,-15,9,-68,-106,48,-6,-16,-24,127,87,68,2,70, 
  /* [55][0][][] */ -34,-15,53,40,51,-29,101,68,-90,-2,19,15,127,48,-6,-3, 
  /* [56][0][][] */ 127,16,6,19,-37,113,-45,-79,-34,41,-71,17,-57,92,-16,46, 
  /* [57][0][][] */ -45,-61,-65,-73,-70,-100,93,-8,-127,-47,83,76,37,27,-13,78, 
  /* [58][0][][] */ 56,-60,56,17,19,-56,-17,-7,13,-9,-127,-18,31,-44,-52,59, 
  /* [59][0][][] */ 80,4,-127,74,8,50,80,-11,-58,-47,34,-83,-90,-61,20,102, 
  /* [60][0][][] */ 0,18,-19,20,-3,-19,-20,1,-39,-64,60,107,-35,-127,-41,5, 
  /* [61][0][][] */ -41,6,68,-108,-84,42,16,106,-2,-91,61,78,99,-14,18,127, 
  /* [62][0][][] */ 73,50,-5,-127,-19,-3,3,-37,-2,35,-41,39,19,-15,-84,-81, 
  /* [63][0][][] */ 6,-25,-1,10,-67,-74,-59,-3,-64,-19,-38,-29,127,8,67,-21, 
  /* [64][0][][] */ 49,3,-33,26,-92,-38,-31,-92,42,108,38,19,27,-69,-54,127, 
  /* [65][0][][] */ -31,3,-9,-37,-76,62,26,-34,46,-121,87,-62,68,59,-127,58, 
  /* [66][0][][] */ -127,81,-63,-91,18,-52,-101,-58,-60,82,56,-21,-113,-37,35,40, 
  /* [67][0][][] */ 4,-25,-127,-124,65,53,0,-14,-3,-6,27,-16,7,37,24,51, 
  /* [68][0][][] */ 59,22,-5,-46,-71,37,17,30,-81,70,127,-8,-11,-44,-125,-7, 
  /* [69][0][][] */ 60,-103,52,-72,25,-117,-31,127,5,57,81,81,-34,68,-30,6, 
  /* [70][0][][] */ 55,-4,115,0,127,-24,109,-19,12,23,-60,67,-70,51,-98,63, 
  /* [71][0][][] */ -13,16,92,-82,-127,-75,34,2,-35,-15,34,-92,-64,-9,8,36, 
  /* [72][0][][] */ -61,-82,22,-127,71,-19,-1,49,-52,24,-124,-17,42,118,-53,115, 
  /* [73][0][][] */ 26,20,50,9,110,-85,-47,14,-24,101,-94,23,-71,-48,127,-26, 
  /* [74][0][][] */ -96,-5,-127,-77,59,-35,-30,17,-69,7,-111,-32,-21,-67,-40,88, 
  /* [75][0][][] */ 91,-34,42,-62,24,16,-127,-31,-10,-113,85,6,14,-27,-12,-1, 
  /* [76][0][][] */ 32,-50,-44,127,36,109,93,-50,71,-92,68,126,63,-94,-51,44, 
  /* [77][0][][] */ -32,-40,97,16,24,-13,-6,-127,11,14,39,78,57,35,12,6, 
  /* [78][0][][] */ -55,3,21,-33,-17,-58,44,-5,39,-9,17,-101,-111,-66,-127,-64, 
  /* [79][0][][] */ -79,-95,-38,4,127,52,-2,9,7,11,-3,67,-23,-101,-62,1, 
  /* [80][0][][] */ -8,-126,35,127,-33,-28,-115,91,-4,13,79,-2,-78,-7,4,75, 
  /* [81][0][][] */ 118,69,-24,86,6,42,16,127,0,13,118,61,121,30,69,-21, 
  /* [82][0][][] */ -74,-10,23,-72,48,-123,-127,-81,-3,72,-27,-22,-35,92,-82,-12, 
  /* [83][0][][] */ 123,-31,55,-28,-12,1,-127,-15,16,-107,22,-36,3,-24,9,-4, 
  /* [84][0][][] */ 38,-97,-125,14,127,33,43,23,-117,7,-109,-13,69,-64,-80,31, 
  /* [85][0][][] */ 30,70,26,-29,113,21,51,-106,108,-40,55,4,127,-112,-12,20, 
  /* [86][0][][] */ 119,-28,127,57,-8,-60,68,43,-52,-50,-100,-51,33,24,-53,2, 
  /* [87][0][][] */ 1,12,8,-77,90,-27,-56,8,26,-22,70,-30,-88,-127,-6,35, 
  /* [88][0][][] */ -90,-43,36,-26,40,30,-62,-52,-13,3,-63,-127,-45,-51,-28,-4, 
  /* [89][0][][] */ -70,18,16,-79,33,6,-127,30,73,23,-58,-7,-19,-73,-40,-10, 
  /* [90][0][][] */ -2,-22,-39,-80,127,28,-58,25,26,47,33,-4,40,10,-73,-16, 
  /* [91][0][][] */ -38,-61,4,43,-39,-6,-25,76,-35,-53,17,-44,1,58,17,127, 
  /* [92][0][][] */ -28,68,-2,-22,-14,79,-112,56,-52,-23,73,11,-19,127,48,35, 
  /* [93][0][][] */ 2,70,-67,-111,91,81,-77,14,72,66,88,68,-127,10,-62,107, 
  /* [94][0][][] */ 78,103,127,-66,-122,-69,18,-52,38,-31,60,3,-83,-76,-16,13, 
  /* [95][0][][] */ -7,18,38,14,127,14,-92,84,14,16,-71,107,1,1,91,-31, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0021392067428678274, 0.0034366876352578402, 0.0019345448818057775, 0.0018717269413173199, 0.0028737334068864584, 0.002435687929391861, 0.0021531747188419104, 0.0022581289522349834, 0.0021776645444333553, 0.0033656740561127663, 0.0019318811828270555, 0.0022300134878605604, 0.0024825127329677343, 0.0016142097301781178, 0.0021531721577048302, 0.0019001774489879608, 0.0020626378245651722, 0.0027102851308882236, 0.0024275255855172873, 0.0016966925468295813, 0.0020677219144999981, 0.002578911604359746, 0.0018263774691149592, 0.0030860104598104954, 0.0032008527778089046, 0.0023189343046396971, 0.0021458419505506754, 0.0018582061165943742, 0.0020545863080769777, 0.0022605573758482933, 0.0021991210523992777, 0.0028996022883802652, 0.0031181746162474155, 0.0023072338663041592, 0.0022867994848638773, 0.002296350197866559, 0.0022543182130903006, 0.0019588572904467583, 0.0016286470927298069, 0.0020470465533435345, 0.0027128397487103939, 0.0019500291673466563, 0.0028672257903963327, 0.002569576958194375, 0.002761149313300848, 0.0024210992269217968, 0.0028738141991198063, 0.0017461345996707678, 0.0014711242401972413, 0.0022537668701261282, 0.0031111850403249264, 0.0016542916418984532, 0.0016306943725794554, 0.0019845620263367891, 0.0020909812301397324, 0.0024178982712328434, 0.0025158550124615431, 0.0020047335419803858, 0.003137475810945034, 0.0021502452436834574, 0.0027504449244588614, 0.00194745440967381, 0.0030979122966527939, 0.0022853645496070385, 0.0014183040475472808, 0.0023173072841018438, 0.0022753276862204075, 0.0018018110422417521, 0.0019036319572478533, 0.0025568739511072636, 0.0020991170313209295, 0.0014513793867081404, 0.0018040048889815807, 0.0023146269377321005, 0.0014647847274318337, 0.0013187426375225186, 0.0015620333142578602, 0.0027270177379250526, 0.0019144017715007067, 0.0021126538049429655, 0.0015954533591866493, 0.0016790207009762526, 0.0023576924577355385, 0.0026764848735183477, 0.0016137087950482965, 0.0022645886056125164, 0.0032457881607115269, 0.0022210807073861361, 0.0034903108607977629, 0.003399186534807086, 0.0019051004201173782, 0.0033175121061503887, 0.0020548331085592508, 0.0015387610765174031, 0.0023467803839594126, 0.0021151555702090263, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 14034, 15317, -6458, 1853, 3812, 6499, -6005, 3383, 14715, -2765, -7622, 7420, -15518, 12518, 1717, 11925, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 8.1137419329024851e-05, 7.307566556846723e-05, 6.2072846048977226e-05, 7.3164650530088693e-05, 7.8980490798130631e-05, 6.354725337587297e-05, 7.3783150583039969e-05, 5.4645628551952541e-05, 8.3143429947085679e-05, 7.6739735959563404e-05, 5.7185661717085168e-05, 5.0190777983516455e-05, 9.870582289295271e-05, 5.7236527936765924e-05, 9.7591298981569707e-05, 8.3027116488665342e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -113,41,59,-40,-63,-36,-44,9,-60,14,-39,-39,25,47,33,-29,3,19,97,19,22,-62,108,58,39,24,-9,37,-60,-113,-81,3,-54,-38,35,-14,-10,22,-6,27,-3,3,-94,-2,-71,-18,4,92,-24,-2,-41,-15,-8,13,38,-45,-127,2,-11,76,45,12,-1,-5,-40,-48,-93,37,-48,-60,13,-12,1,-25,-57,-56,-45,26,-51,4,-57,74,92,-74,15,41,8,60,47,-21,-14,-18,-33,-32,-60,20, 
  /* [1][0][][] */ 43,3,30,-52,-76,-22,-10,17,-17,25,40,-67,2,-18,-79,-51,-3,20,-61,39,-25,-75,19,48,-5,-78,-8,-58,75,-113,110,-60,59,22,-17,45,38,66,-27,-52,31,22,-4,-2,6,55,-127,-45,-50,-55,-32,-33,38,-70,-38,45,26,-10,-35,3,33,45,2,-91,2,-4,-63,-8,7,-15,-85,-25,-51,-32,23,-78,10,7,31,-62,-26,-37,-88,-25,29,-26,-19,9,-81,-21,-58,41,18,70,-45,65, 
  /* [2][0][][] */ 86,-66,29,53,7,-52,66,3,-24,-13,-13,16,-63,-30,24,-53,-85,-60,-33,33,15,-42,-24,23,18,-73,13,-15,-24,41,-57,127,-59,112,-30,33,-2,-28,-19,-5,-93,86,99,19,-65,0,-36,-11,40,6,-37,-37,70,-37,-15,67,54,-11,41,-21,22,34,-37,20,84,33,19,-20,30,54,-38,-15,37,48,72,34,43,-89,69,57,89,-7,-40,37,-66,40,5,42,12,-4,-17,43,-46,52,-15,36, 
  /* [3][0][][] */ -11,-7,-32,29,5,-15,28,-46,-34,73,32,69,24,1,-68,35,15,-35,45,5,36,127,27,-90,15,21,-40,9,91,-44,86,-28,-14,34,-42,-35,9,68,44,11,-75,-12,-23,20,-61,48,12,8,-4,-50,-22,-27,47,-97,-26,-41,17,83,-28,21,8,-7,-53,-8,50,61,-87,-2,-26,-15,11,-91,-30,-60,62,-2,12,-22,-59,-55,-25,-6,-72,25,-13,-24,23,-36,2,11,45,-1,55,21,-50,68, 
  /* [4][0][][] */ 12,14,-20,-19,33,29,-49,2,-45,68,99,-9,-9,1,9,-67,2,-9,-22,36,28,-49,53,70,-68,2,-127,21,-40,-50,10,24,-73,-40,29,40,-4,31,13,25,-31,-52,36,-34,-1,20,-31,58,-60,40,19,26,47,-8,-76,0,13,-22,13,-27,35,-12,22,14,-68,6,-26,3,-44,28,-36,58,33,-73,-53,-55,40,-41,-20,-6,-45,100,-70,5,-10,7,18,-42,66,-11,17,7,-51,-37,48,35, 
  /* [5][0][][] */ -99,49,53,-15,65,-39,83,-22,-30,58,-14,-15,28,-20,-19,-59,-12,-25,60,29,-93,-38,-107,28,-62,15,50,26,47,-83,-19,40,55,127,-6,35,-24,50,39,4,-28,118,77,-43,-22,74,53,-7,5,7,-11,37,14,-27,41,-102,40,-52,-44,-47,46,103,-57,-22,73,-46,-120,-52,-53,-6,-53,-4,-23,-5,-9,-44,29,-30,-54,-36,124,-16,39,-96,-88,26,43,-2,-30,49,26,-12,-5,29,7,100, 
  /* [6][0][][] */ 35,3,-98,56,-32,-103,105,127,-67,62,-16,92,-102,-63,70,58,10,-47,-21,-17,18,-30,-57,-88,-51,58,70,36,33,37,91,-52,50,1,1,-40,14,37,24,75,6,27,-42,-34,-18,-55,-75,17,38,-76,-37,61,23,24,-9,-35,87,31,5,32,-80,44,-81,-11,39,28,-24,65,44,40,0,-56,-30,16,104,52,48,-50,17,-82,-30,-52,-66,46,-10,-35,35,5,-57,50,60,58,-24,-3,-49,82, 
  /* [7][0][][] */ 10,75,-42,-104,-42,-47,-3,33,-79,3,-1,-111,-66,13,14,-26,-59,-41,-26,72,-8,127,-30,12,-24,-3,21,17,71,83,89,-15,74,45,1,-14,-26,-18,2,45,-64,-45,18,-65,66,-36,95,-2,60,-76,-68,-25,-75,14,-6,-10,35,-11,-103,3,20,83,62,-29,-6,8,-77,51,-48,-15,-100,43,27,46,-86,39,-65,77,24,-95,-43,-73,76,-62,69,-23,-29,-24,-7,109,-89,37,73,-50,-47,28, 
  /* [8][0][][] */ 4,83,-60,28,-35,-24,-73,19,-92,-40,27,-4,-34,29,52,108,13,-62,2,27,33,4,4,0,-37,91,4,25,-18,-21,-56,-26,-25,-50,-34,-59,-32,40,46,7,1,-51,28,17,-42,-52,19,-19,-22,-25,58,71,-3,-15,-76,98,-35,44,-3,-29,-44,7,26,60,-24,-61,-49,-4,-49,21,0,7,-21,-52,-107,-21,-61,31,-58,-32,-31,-10,-43,-42,-18,0,33,35,10,89,-57,-10,-93,-127,13,-48, 
  /* [9][0][][] */ -24,5,-70,61,-32,-24,72,58,-24,38,-41,107,-31,-20,33,113,20,11,80,-3,14,29,57,-114,-33,-14,14,-9,36,-26,50,56,-53,-5,4,-127,16,-43,-24,-27,-8,24,58,-19,-19,3,-2,14,34,82,16,5,-41,-95,7,-7,2,-26,74,-28,-50,49,-64,-18,90,-15,-4,-8,-65,6,50,30,-21,81,-20,-27,-19,23,-57,-17,59,-26,58,10,36,-11,-31,-30,-65,4,-9,2,75,30,-39,1, 
  /* [10][0][][] */ 65,2,-42,-8,-28,-27,83,2,15,-21,-11,0,-87,-7,3,3,-74,-28,16,-1,46,32,13,2,-41,72,36,-1,-45,-63,-30,-10,67,-39,44,24,69,-75,82,127,25,-62,-3,8,-32,-79,-1,45,18,79,-65,-42,-18,31,13,43,3,-53,74,61,-22,47,-60,-26,-21,-66,26,50,24,-21,-7,44,112,28,35,-79,27,-54,38,-14,-50,32,37,15,-30,-17,6,35,-33,-10,26,49,55,63,-35,5, 
  /* [11][0][][] */ -58,-28,60,-71,23,-33,-12,-45,47,-48,8,4,-9,3,18,9,-68,14,57,8,-26,13,-68,-87,3,17,-43,49,29,-54,17,-40,10,-8,28,-24,-76,36,-115,36,-74,73,-58,52,13,21,3,-52,9,-39,-54,-44,35,28,79,-71,-47,-59,19,-44,-43,-34,-38,-122,-10,-88,20,79,127,27,84,-18,-37,-32,74,-35,104,49,7,40,25,9,-11,75,88,3,3,-9,-64,-49,-14,19,77,34,49,82, 
  /* [12][0][][] */ 47,-14,-12,7,33,99,25,39,38,68,-27,81,12,44,12,4,-29,46,7,36,127,-6,62,-62,29,25,-51,-45,-10,43,-3,-14,40,-9,-3,-20,43,11,-24,-20,16,8,28,43,-49,12,3,-24,-61,21,-2,27,-6,-20,24,22,-38,56,13,58,8,-60,7,-82,-15,75,-19,-33,2,-41,52,15,-7,0,22,56,-8,32,-62,-15,-11,31,105,-6,-25,69,-20,-39,70,-13,-59,46,62,12,-22,-86, 
  /* [13][0][][] */ -18,8,-26,-36,-55,-12,-16,-29,5,-51,-6,-70,46,-101,-36,-91,-10,-58,-75,-27,-107,-16,13,97,-30,-2,100,-4,40,-40,41,44,20,-12,-127,119,-30,-68,47,-42,115,-3,15,45,9,-88,47,-29,79,1,-57,18,26,-14,-6,85,80,-69,-51,-20,72,32,7,-96,14,32,-8,29,-69,-42,-66,-9,-65,31,-53,-78,-111,7,41,94,-27,34,26,-70,50,45,15,-36,-50,-1,5,14,-56,10,-20,-4, 
  /* [14][0][][] */ 3,16,-89,-9,65,83,-104,-1,35,-49,82,-14,9,-32,-31,-67,-54,15,35,127,4,-24,1,12,-1,34,-28,59,6,-12,-28,3,70,-6,-46,5,-12,56,72,11,52,-3,43,4,0,-52,45,-32,35,-11,-17,-25,41,3,-41,36,37,55,-90,-9,2,-60,-28,-101,28,-30,-47,4,-71,55,-21,23,-1,-31,-32,-28,28,-21,-36,-19,27,-10,-2,-7,-28,60,-6,-30,-39,79,74,12,-6,-30,-47,-60, 
  /* [15][0][][] */ -88,-20,57,-54,37,-31,-30,-96,5,21,-12,72,-15,-3,23,96,-114,-10,12,-81,32,-44,-20,-54,47,-17,52,-49,-73,-99,-61,28,-51,48,99,-93,-24,-36,6,-22,-37,-3,5,-21,6,10,65,93,-64,-18,30,-49,-34,54,5,-75,-127,-6,100,-1,-57,40,-86,17,-96,-34,0,23,59,-71,87,-18,45,-33,-51,-36,23,36,46,-4,-16,101,63,19,23,-36,-101,18,7,-27,-88,33,57,-43,-17,64, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.003448340343311429, 0.0031057156156748533, 0.0026380957569926977, 0.0031094974838197231, 0.0033566707279533148, 0.0027007581666111946, 0.0031357838306576014, 0.0023224391043186188, 0.0035335957072675228, 0.0032614385709166527, 0.0024303905665874481, 0.002133107976987958, 0.004194997251033783, 0.0024325523991137743, 0.0041476301848888397, 0.0035286522470414639, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 1514, -1296, -2915, -3071, 739, 2312, -1464, -193, -494, -2869, 8827, -1756, -3114, 11472, 6580, -4925, 16710, 1183, -4290, 343, -1429, 2604, -637, -2394, 582, -5099, -2958, -3046, -1617, -8366, 296, -1122, 15563, -533, -2907, 49, 1362, -1068, -1349, 9751, 1336, -1948, 2322, -5311, 14817, 17933, 128, 19536, -1390, 7501, 11503, -2752, -708, -1091, -943, 12009, -1263, -352, 12096, 4599, 8209, 10598, -1657, -5327, 1063, 4653, -1546, 4975, -4954, -1963, -3339, 3231, 13024, -415, -4658, 12515, -2852, 239, 6714, -887, 900, 20565, -3029, 4414, 16447, 3954, 1110, -2034, -3230, -6964, 13865, -459, -745, -545, -5573, -3309, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00025088666006922722, 0.00017746133380569518, 0.00010462559293955564, 0.00026133397477678955, 0.00025949013070203364, 0.00031045704963617027, 0.00032941086101345718, 0.00026806842652149498, 0.00020146160386502743, 0.00015368923777714372, 0.00016836353461258113, 0.0004281669098418206, 0.00025581649970263243, 9.5849136414472014e-05, 0.00015028056805022061, 0.00014483372797258198, 9.3904534878674895e-05, 0.00021998501324560493, 0.00016366392083000392, 0.00010000608745031059, 0.00022551980509888381, 0.00031477608717978001, 0.00023553727078251541, 0.00019385245104786009, 0.00051731237908825278, 0.00016856339061632752, 0.00025526728131808341, 0.00014086921873968095, 0.00022972136503085494, 9.8268610599916428e-05, 0.00038193372893147171, 0.00021365765132941306, 0.00015995961439330131, 0.00016422645421698689, 0.00026387959951534867, 0.00034968819818459451, 0.00016860812320373952, 0.00040406358311884105, 0.00033792122849263251, 0.0001277314149774611, 0.00019837653962895274, 0.000204371681320481, 0.000287431146716699, 0.00015045444888528436, 9.4241542683448642e-05, 8.129086927510798e-05, 0.00023408389824908227, 7.4366966146044433e-05, 0.00016450542898382992, 0.00012293059262447059, 0.00012368579336907715, 0.00013668849715031683, 0.00014099216787144542, 0.00017996389942709357, 0.0002135263493983075, 0.00013452929852064699, 0.00015505663759540766, 0.00017746514640748501, 0.0001493063464295119, 0.00016796495765447617, 0.00017340364865958691, 0.00015998759772628546, 0.00016389226948376745, 0.00016272302309516817, 0.00018304245895706117, 0.00031006496283225715, 0.00051081954734399915, 0.00020918002701364458, 0.00022841355530545115, 0.00023425633844453841, 0.00026345127844251692, 0.00020439847139641643, 0.00011307132808724418, 0.00021540516172535717, 0.00028854224365204573, 0.00010162928811041638, 0.0001207179666380398, 0.00021612756245303899, 0.0001902074582176283, 0.00023109590983949602, 0.00028089730767533183, 9.0831330453511328e-05, 0.00029425972024910152, 0.00016022479394450784, 9.5020215667318553e-05, 0.00021073510288260877, 8.8172913820017129e-05, 0.00019374795374460518, 0.00029797333991155028, 0.00015488429926335812, 9.0215544332750142e-05, 0.00025859422748908401, 0.00020855611364822835, 0.0002526733442209661, 9.9110300652682781e-05, 0.00025048066163435578, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 13,127,12,-13,-53,6,38,32,49,-43,-61,69,3,7,74,-27,-127,26,-6,29,32,41,92,91,7,17,-42,-4,-29,44,-3,6,-72,9,-22,61,-19,56,12,-20,15,-29,-12,46,-106,-127,1,-55,-18,-41,-10,13,30,63,-16,-12,-87,-46,-79,-127,-127,22,-103,-4,-30,13,72,-22,-21,16,56,-5,-36,-11,54,-25,10,-45,-52,9,-6,-87,58,-43,-9,-71,-71,57,-91,32,-61,51,95,-10,65,-12, -43,-41,-10,65,-28,108,-21,-10,90,37,-127,91,-16,-111,-84,119,-120,62,30,94,127,-7,115,127,31,61,22,38,17,127,-22,-127,39,80,16,4,53,127,-19,-127,127,-6,85,127,-45,-79,127,-113,-7,-95,-117,-11,49,127,-24,-127,10,46,-127,-88,-13,-92,-10,61,-40,56,126,-36,21,127,127,-17,-76,17,-10,-89,38,-57,-9,127,-11,-114,127,-94,-84,-54,111,97,117,127,-88,9,127,-20,127,22, 16,-108,5,16,-42,-12,-19,37,7,70,-65,61,4,52,78,-71,-36,27,-3,27,30,26,71,68,11,12,30,33,-1,26,-10,-53,-61,-83,-22,50,-17,-7,23,-7,-18,31,-23,59,-45,-106,0,-20,44,-48,17,15,36,5,3,-9,84,-63,-44,-56,-97,24,-73,-5,44,-5,7,-40,-12,-17,27,-9,-21,-59,3,2,18,-15,-44,5,-1,-96,44,-25,21,-55,-53,-73,-77,25,-19,45,46,37,-1,-23, 
  /* [0][1][][] */ 87,16,79,92,-1,-57,127,33,-33,-127,-88,127,14,-127,-77,33,-55,-83,77,31,-83,-8,-113,-29,1,28,-104,127,-43,50,127,80,8,67,23,127,-127,26,-18,-82,60,-119,15,51,-127,-42,7,-127,-103,-59,-105,33,111,-42,106,-27,-127,-14,-45,4,-91,-47,23,42,-113,-34,115,-87,-45,33,-26,-127,-122,90,127,-127,127,95,-88,-44,127,-109,-26,100,-50,-26,-62,102,22,16,-48,48,-26,-82,86,-2, -127,15,-50,127,-69,-127,-97,-127,111,5,-54,36,-61,-122,-127,127,-100,-127,127,127,44,-127,-127,89,-127,127,21,68,-76,-24,-110,78,-127,81,127,-57,22,108,127,-65,-55,39,23,33,-20,-44,-79,-127,9,-127,-127,127,30,81,67,-72,13,20,107,10,-47,-21,-81,127,-16,-127,127,127,36,55,-85,-87,-28,75,-75,-97,123,127,53,-60,-78,43,-72,67,-118,-98,127,127,127,120,-127,-127,-127,-47,100,127, 53,4,127,99,3,-31,11,47,-65,114,-82,84,18,-48,-113,44,41,-47,19,13,-107,-2,-74,-49,8,11,127,-10,127,99,26,-106,-20,-127,-2,100,-115,-2,-37,-73,-17,127,-4,82,-82,-33,-10,-108,127,-56,-40,-1,39,-71,-127,26,83,-14,-117,45,-54,-55,50,35,127,-39,35,-39,-57,13,-27,-51,-127,-127,18,-58,23,-34,-127,-40,-77,-117,-20,127,-95,10,-67,-47,-33,10,-18,52,-15,127,19,-4, 
  /* [0][2][][] */ 17,-127,47,-22,16,9,30,45,-43,-48,-5,-16,18,17,28,53,-46,26,-10,27,-12,33,20,-27,15,74,-13,-17,-2,22,11,61,-41,-10,-20,8,43,-4,12,-66,-9,19,-15,-9,-55,-118,-11,-46,-41,28,-36,5,2,-20,-31,-27,-41,-9,19,43,-67,-21,92,-22,-50,22,-14,-28,33,20,38,79,-27,31,26,-17,-11,-33,11,17,2,-118,-8,-73,-127,21,-104,-58,-54,33,-20,41,2,-10,4,-17, -66,16,124,12,127,67,-24,-9,-127,3,-60,-34,127,-79,-25,18,-29,74,-11,-46,22,0,36,-24,62,-11,-3,24,-3,98,-17,55,-61,32,15,-67,59,53,32,-95,-34,14,-127,3,3,-1,-40,-85,-16,-34,-56,47,127,-75,-39,-84,-6,127,-10,44,57,-127,127,29,-36,4,13,7,127,5,33,73,-98,18,-4,-72,-6,-80,-3,-42,-14,-109,-20,-105,-91,127,22,-53,109,54,12,36,-44,-21,12,2, 12,84,36,-22,3,-4,-11,34,-10,65,26,16,16,24,19,59,-31,25,3,36,-20,26,-12,-28,-3,46,27,6,29,11,-14,-61,-64,-17,-10,-29,31,-31,4,-53,-19,3,-5,24,-37,-114,-12,-40,21,27,15,-15,-5,-25,18,-1,42,11,24,56,-71,-12,81,-20,36,13,-32,-4,37,17,19,63,10,-20,11,4,13,-17,18,12,-13,-127,-5,-35,-117,15,-96,-82,-70,50,-1,31,-12,1,-4,-13, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0106626832857728, 0.0075421067886054516, 0.0044465875253081322, 0.011106694117188454, 0.011028329841792583, 0.013194424100220203, 0.013999961316585541, 0.011392908170819283, 0.0085621178150177002, 0.0065317926928400993, 0.0071554500609636307, 0.018197093158960342, 0.010872201062738895, 0.0040735881775617599, 0.0063869240693747997, 0.0061554331332445145, 0.0039909426122903824, 0.009349362924695015, 0.0069557162933051586, 0.0042502586729824543, 0.0095845917239785194, 0.013377984054386616, 0.010010333731770515, 0.0082387290894985199, 0.021985774859786034, 0.0071639441885054111, 0.010848859325051308, 0.0059869415126740932, 0.0097631579264998436, 0.0041764159686863422, 0.016232183203101158, 0.0090804500505328178, 0.0067982836626470089, 0.0069796242751181126, 0.01121488306671381, 0.014861748553812504, 0.0071658450178802013, 0.01717270165681839, 0.014361652545630932, 0.0054285847581923008, 0.0084310024976730347, 0.0086857965216040611, 0.01221582293510437, 0.0063943136483430862, 0.0040052654221653938, 0.0034548619296401739, 0.0099485656246542931, 0.0031605958938598633, 0.0069914804771542549, 0.0052245501428842545, 0.0052566463127732277, 0.0058092609979212284, 0.0059921671636402607, 0.0076484656892716885, 0.0090748695656657219, 0.0057174949906766415, 0.0065899067558348179, 0.0075422683730721474, 0.0063455193303525448, 0.007138510700315237, 0.007369654718786478, 0.0067994724959135056, 0.0069654211401939392, 0.0069157285615801811, 0.0077793044038116932, 0.013177760876715183, 0.021709829568862915, 0.0088901510462164879, 0.0097075756639242172, 0.0099558942019939423, 0.011196679435670376, 0.0086869345977902412, 0.0048055313527584076, 0.0091547193005681038, 0.012263044714927673, 0.0043192445300519466, 0.005130513571202755, 0.0091854212805628777, 0.0080838166177272797, 0.0098215760663151741, 0.011938135139644146, 0.0038603316061198711, 0.012506037950515747, 0.0068095535971224308, 0.0040383590385317802, 0.0089562414214015007, 0.0037473486736416817, 0.0082342876121401787, 0.012663866393268108, 0.0065825823694467545, 0.0038341605104506016, 0.010990254580974579, 0.008863634429872036, 0.010738616809248924, 0.0042121876031160355, 0.010645427741110325, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 5740, 2065, 739, -1725, 3728, 6494, 4653, 1025, -135, 7132, 694, -4374, 2408, 2212, 453, -394, 3460, 5434, -412, 100, 2737, 9068, 12329, -927, -2401, -791, 8973, 106, 1368, 999, 10605, -1349, 9114, 2473, 3673, -3061, 598, -4026, 82, 1349, 2270, 833, 1371, -196, 1007, 2348, 2803, 2527, 3088, 1875, 4496, 2282, -1772, 925, 763, 1492, 2028, 2041, 5523, 836, -886, 4871, 3748, 2516, 3010, 5839, -6069, 2267, 4014, -527, 5755, 1676, 2068, 2301, 2664, 1414, -674, 1700, 2076, 3507, 2514, 2531, 5660, 670, 2041, 4559, 1136, -551, 10475, -315, 499, -863, 8251, 2060, -175, -839, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00013444796786643565, 0.00017507009033579379, 0.0001873670844361186, 0.00016455903823953122, 0.0001846367958933115, 0.00012933401740156114, 0.00016451533883810043, 0.00018738670041784644, 0.00024882721481844783, 0.00011755064042517915, 0.00025741235003806651, 0.00013616424985229969, 0.00019987320411019027, 0.00020597080583684146, 0.00021180800104048103, 0.00017056836804840714, 0.00017385065439157188, 0.00013481594214681536, 0.00013898195174988359, 0.00015249534044414759, 0.00020589864288922399, 9.4404356786981225e-05, 7.5743300840258598e-05, 0.0002477887028362602, 0.00023297169536817819, 0.00021118056611157954, 0.00010740948346210644, 0.00015269483265001327, 0.00016679073451086879, 0.00019638318917714059, 8.3525679656304419e-05, 0.00021358995581977069, 9.8674994660541415e-05, 0.00020422902889549732, 0.00016894168220460415, 0.00019794647232629359, 0.00019120710203424096, 0.00015349184104707092, 0.00016953535669017583, 0.00024244993983302265, 0.00022513381554745138, 0.00021957184071652591, 0.0002581881417427212, 0.00030684404191561043, 0.00026553013594821095, 0.00018898560665547848, 0.00019671341578941792, 0.0002339944476261735, 0.00018050098151434213, 0.00023469977895729244, 0.00015704467659816146, 0.00018917852139566094, 0.00020434545876923949, 0.00029241738957352936, 0.00025740612181834877, 0.00025596920750103891, 0.0001620751281734556, 0.00016591785242781043, 0.00013943883823230863, 0.00026027794228866696, 0.00021560936875175685, 0.00014023292169440538, 0.00015208146942313761, 0.00025921259657479823, 0.00015552135300822556, 0.00012847599282395095, 0.00011961832933593541, 0.00018400697445031255, 0.00016120137297548354, 0.00029720651218667626, 0.00012119729944970459, 0.00014810226275585592, 0.00020566396415233612, 0.00017547555034980178, 0.00018398706743028015, 0.00013848188973497599, 0.00022673918283544481, 0.00019295956008136272, 0.00018531552632339299, 0.00015413663641083986, 0.00018193027062807232, 0.00017931200272869319, 0.00013170039164833724, 0.00015903775056358427, 0.00018036052642855793, 0.00015094391710590571, 0.00022574116883333772, 0.00028528991970233619, 8.3192571764811873e-05, 0.00021835276857018471, 0.00025082798674702644, 0.00025423878105357289, 0.00010723670857260004, 0.00019083768711425364, 0.00032190672936849296, 0.00015206464740913361, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -64,47,1,-19,-19,-30,-63,-13,51,-51,39,-91,97,-95,-6,-127, 
  /* [1][0][][] */ -79,73,-104,-127,-73,12,-19,52,-33,22,78,-16,57,117,20,32, 
  /* [2][0][][] */ -40,-15,-71,-17,0,-44,41,-45,-87,113,71,24,36,33,-59,127, 
  /* [3][0][][] */ -40,-97,-11,-38,-91,46,-40,-127,-13,-21,77,-68,-40,-66,-127,-35, 
  /* [4][0][][] */ 84,-22,-12,37,-67,-18,-127,39,26,111,16,56,34,-5,-47,-73, 
  /* [5][0][][] */ -85,39,-83,-34,53,-50,-18,-74,72,-28,17,-36,29,-102,-127,-75, 
  /* [6][0][][] */ -20,-42,-15,35,-69,72,12,-37,-33,-40,127,3,23,-4,-117,19, 
  /* [7][0][][] */ -23,124,127,-72,77,86,-34,-56,55,99,-112,-43,74,2,26,89, 
  /* [8][0][][] */ -14,12,43,-29,65,20,58,127,-65,-13,-56,-72,38,53,-63,-44, 
  /* [9][0][][] */ 11,16,76,15,-96,-21,-54,-102,28,-15,127,63,-25,-84,47,-22, 
  /* [10][0][][] */ -2,-111,21,-71,-127,47,45,4,-5,-55,-19,35,-33,40,-114,2, 
  /* [11][0][][] */ 92,-81,-43,127,-86,-14,66,-19,78,86,-25,51,51,-97,-5,107, 
  /* [12][0][][] */ -62,-51,127,2,45,-16,15,77,62,-27,81,65,-28,54,-89,4, 
  /* [13][0][][] */ -6,-36,12,28,14,15,127,24,-111,27,21,15,-7,92,108,-72, 
  /* [14][0][][] */ 127,-86,114,-8,72,56,94,48,78,85,52,34,73,-55,24,-51, 
  /* [15][0][][] */ 0,127,13,-56,37,115,-74,55,-53,-32,-45,-22,-48,106,-16,-41, 
  /* [16][0][][] */ -58,78,127,-41,25,88,2,-14,-4,15,-26,27,83,8,98,119, 
  /* [17][0][][] */ -18,84,73,-127,39,-37,2,-109,-67,58,-3,54,-86,-38,67,-48, 
  /* [18][0][][] */ -55,-15,-93,-60,114,113,-53,-41,19,64,127,75,6,90,-34,-1, 
  /* [19][0][][] */ 69,97,85,87,67,-6,-30,8,-40,112,63,127,78,77,-77,38, 
  /* [20][0][][] */ 127,4,14,55,-48,10,-25,36,-24,-67,-126,-41,87,-65,23,-3, 
  /* [21][0][][] */ -95,-73,-15,119,-35,-17,-127,68,16,12,8,7,-56,58,-60,-6, 
  /* [22][0][][] */ -9,-6,-62,-39,127,-13,-69,63,79,97,50,83,-40,37,-21,28, 
  /* [23][0][][] */ -69,10,-22,-4,21,67,94,76,-13,127,-14,-14,8,28,-66,-24, 
  /* [24][0][][] */ 39,-77,27,1,127,35,73,-36,57,25,51,25,-60,26,-13,-17, 
  /* [25][0][][] */ 127,-34,71,17,6,3,-33,84,92,-35,-50,13,102,-63,102,37, 
  /* [26][0][][] */ 26,28,82,127,56,-1,-34,-16,13,88,6,106,25,-47,16,-64, 
  /* [27][0][][] */ -53,71,-74,20,-32,112,12,-34,21,-88,127,25,22,-16,117,81, 
  /* [28][0][][] */ -64,45,-61,-120,25,-83,-23,-69,-87,127,-94,29,-45,60,-22,49, 
  /* [29][0][][] */ 73,96,-60,45,19,70,-48,-23,54,52,-2,51,-127,27,-37,65, 
  /* [30][0][][] */ -3,81,-116,-108,84,-37,-18,-1,-44,62,-84,-39,19,25,-22,127, 
  /* [31][0][][] */ 31,-127,99,24,74,-84,-75,23,11,-16,22,-52,-79,36,37,127, 
  /* [32][0][][] */ -47,73,-4,38,-94,63,34,50,17,-127,37,-72,35,31,53,62, 
  /* [33][0][][] */ -81,-4,52,108,3,20,-56,18,-48,-48,26,-32,-14,3,6,127, 
  /* [34][0][][] */ 13,0,-85,-89,64,-1,-35,56,8,-17,-15,-30,-49,-30,-37,127, 
  /* [35][0][][] */ 83,-14,10,-13,7,30,-66,-16,-9,-127,-45,3,2,-46,46,-12, 
  /* [36][0][][] */ -1,16,-107,-12,20,127,-16,33,-12,1,53,21,3,25,-73,34, 
  /* [37][0][][] */ 64,20,72,-66,42,-127,43,-10,-122,68,-98,-2,31,17,110,26, 
  /* [38][0][][] */ -47,122,43,-47,31,21,69,-99,20,2,-127,44,-58,-110,-97,4, 
  /* [39][0][][] */ 60,20,-120,-93,-24,-36,38,-65,21,9,10,-32,60,-9,-127,-66, 
  /* [40][0][][] */ -52,11,-81,-82,-35,-19,25,-127,-14,-13,18,-39,36,75,28,69, 
  /* [41][0][][] */ -42,-119,-10,127,-7,-8,-51,-31,-1,-71,87,-43,-68,-22,1,26, 
  /* [42][0][][] */ -26,67,-25,-127,17,12,10,-38,68,24,-48,14,69,-36,-44,12, 
  /* [43][0][][] */ 9,56,15,2,115,18,8,23,22,55,-20,-85,-127,-31,-33,-28, 
  /* [44][0][][] */ 68,-56,21,52,-39,-10,18,28,19,-71,48,5,127,-21,-41,-43, 
  /* [45][0][][] */ 18,-84,-81,23,-16,-80,-12,52,29,-24,17,44,-84,127,26,-31, 
  /* [46][0][][] */ -5,-81,87,64,-31,-14,-127,47,34,-40,16,-47,26,89,110,96, 
  /* [47][0][][] */ -41,-38,23,82,-4,-11,48,7,16,-59,-127,-45,34,-16,-61,0, 
  /* [48][0][][] */ -43,93,-18,-41,22,73,-32,-96,34,-32,27,-61,62,-127,-46,50, 
  /* [49][0][][] */ -72,8,33,-57,23,15,108,127,-38,-27,1,28,-44,49,-68,35, 
  /* [50][0][][] */ 71,1,-102,4,50,-127,-70,-8,-102,64,-32,3,37,-125,-117,-35, 
  /* [51][0][][] */ -32,80,-21,127,-56,46,-48,-69,-38,-105,-8,-39,9,47,21,110, 
  /* [52][0][][] */ -117,-3,9,7,22,59,54,6,16,-95,-34,-39,-94,-76,-127,-14, 
  /* [53][0][][] */ -44,-56,-25,-127,-52,0,10,77,40,-60,-65,18,-33,14,77,88, 
  /* [54][0][][] */ -11,-60,2,32,-94,36,39,-33,-13,-94,39,7,-25,4,-127,9, 
  /* [55][0][][] */ -23,-31,-35,37,73,-21,67,90,-60,-62,-127,-30,71,-24,-19,41, 
  /* [56][0][][] */ 102,-48,-94,-45,-103,34,-127,20,-20,-26,-23,16,121,-79,25,73, 
  /* [57][0][][] */ -75,18,41,-19,118,22,63,54,-22,69,-15,1,-89,100,-127,-53, 
  /* [58][0][][] */ 28,6,9,-17,42,-23,-74,-66,65,-127,-85,-12,-93,-33,-41,46, 
  /* [59][0][][] */ -40,-14,-13,0,16,68,-95,-28,82,127,-83,-9,-21,-8,-23,9, 
  /* [60][0][][] */ 37,-71,25,26,-127,-63,24,5,2,28,-37,42,-9,-51,29,32, 
  /* [61][0][][] */ 3,53,-98,-10,-27,-10,-127,-61,-38,29,47,122,63,-36,94,74, 
  /* [62][0][][] */ 80,2,57,-28,6,28,42,127,-77,90,6,48,-5,60,81,91, 
  /* [63][0][][] */ 20,-97,-5,-12,-61,14,47,-22,-13,-17,-4,-8,-34,127,101,31, 
  /* [64][0][][] */ 0,-10,-105,-31,3,29,20,-29,12,-90,19,-7,47,-65,-52,127, 
  /* [65][0][][] */ -31,-22,67,60,75,-39,81,71,-39,-10,-127,-80,16,110,-80,-20, 
  /* [66][0][][] */ -31,-127,-28,-104,-56,-111,34,-29,5,-30,23,61,-37,-72,-68,102, 
  /* [67][0][][] */ -49,-98,-94,-44,-100,127,14,-119,-101,-18,-64,-108,26,-17,-68,38, 
  /* [68][0][][] */ 127,44,10,-32,-48,26,-64,-77,-63,-83,-19,-21,37,-56,29,-52, 
  /* [69][0][][] */ 43,-8,15,-9,-4,-37,-41,35,-23,127,-14,10,9,32,62,-14, 
  /* [70][0][][] */ 45,1,-15,50,-117,34,5,-108,93,127,18,60,52,-72,-3,24, 
  /* [71][0][][] */ 127,-112,53,104,-100,-28,47,-41,102,-19,-29,102,94,-78,37,19, 
  /* [72][0][][] */ -4,-32,40,79,42,-9,-127,72,80,1,39,3,-54,-70,-75,75, 
  /* [73][0][][] */ 71,15,54,-127,55,-83,-56,34,3,93,-32,21,9,-94,27,-34, 
  /* [74][0][][] */ 100,-40,34,73,-127,6,29,9,-118,-51,29,-20,90,-122,-12,27, 
  /* [75][0][][] */ 84,127,-123,45,63,92,7,-15,-30,-30,49,65,-95,58,75,100, 
  /* [76][0][][] */ -52,-51,-14,-17,-46,6,75,-3,-67,18,83,43,-34,-127,-10,86, 
  /* [77][0][][] */ -86,127,-23,34,-66,-76,64,104,69,-63,-12,89,-23,59,-23,99, 
  /* [78][0][][] */ 126,42,-62,49,-101,32,-127,-3,-7,-26,-70,5,31,-98,28,43, 
  /* [79][0][][] */ -98,-64,102,71,-36,-127,-70,-25,11,42,29,11,-59,111,-47,89, 
  /* [80][0][][] */ 40,88,26,-127,-13,22,96,-36,18,24,-34,24,66,-57,1,-4, 
  /* [81][0][][] */ 20,-55,29,-94,86,27,-29,112,127,25,-21,-57,-35,46,-99,-91, 
  /* [82][0][][] */ 75,52,111,0,127,-117,23,38,-7,112,-43,21,-18,-46,50,-116, 
  /* [83][0][][] */ -33,82,16,47,80,59,127,96,-8,75,-56,-74,-94,111,-44,-107, 
  /* [84][0][][] */ 27,-71,-10,73,-8,-69,-73,54,-90,86,-75,-20,-127,75,-8,-61, 
  /* [85][0][][] */ -89,79,-1,-29,-38,-82,-66,-40,-32,40,-4,-86,-127,-82,-47,40, 
  /* [86][0][][] */ 6,58,74,72,47,-21,40,10,1,23,-30,-48,35,62,-127,-35, 
  /* [87][0][][] */ -13,44,127,-34,-77,-17,12,13,25,6,-1,45,-26,17,-10,2, 
  /* [88][0][][] */ 12,-67,-127,15,56,49,-41,26,-8,-93,-107,-96,107,-33,11,58, 
  /* [89][0][][] */ 51,-4,-18,-127,22,-48,-64,95,122,-27,58,-88,32,-42,73,-55, 
  /* [90][0][][] */ -11,61,27,37,-37,43,44,127,-7,-57,-10,120,61,18,-38,86, 
  /* [91][0][][] */ -65,-6,-20,65,84,49,-35,-120,-48,22,-5,16,-90,-127,-65,-13, 
  /* [92][0][][] */ -42,81,10,-53,-127,7,-60,63,-55,55,104,84,-12,-40,78,30, 
  /* [93][0][][] */ 112,55,69,65,-127,-49,19,26,-52,-59,-25,-96,46,-39,3,-11, 
  /* [94][0][][] */ -33,-120,26,-127,11,42,-10,23,85,-21,10,47,21,49,-40,64, 
  /* [95][0][][] */ -35,-82,-48,-65,127,127,-41,46,64,36,-59,49,-26,107,-88,50, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0016720108687877655, 0.0021771923638880253, 0.0023301192559301853, 0.0020464756526052952, 0.0022961650975048542, 0.001608413178473711, 0.002045932225883007, 0.0023303632624447346, 0.0030944447498768568, 0.0014618736458942294, 0.0032012106385082006, 0.0016933548031374812, 0.0024856468662619591, 0.0025614772457629442, 0.0026340694166719913, 0.002121208468452096, 0.0021620274055749178, 0.0016765870386734605, 0.0017283959314227104, 0.0018964501796290278, 0.0025605799164623022, 0.0011740237241610885, 0.00094195269048213959, 0.0030815296340733767, 0.0028972635045647621, 0.0026262665633112192, 0.0013357570860534906, 0.0018989309901371598, 0.0020742292981594801, 0.0024422446731477976, 0.0010387352667748928, 0.002656230004504323, 0.0012271339073777199, 0.0025398163124918938, 0.0021009787451475859, 0.002461685799062252, 0.0023778742179274559, 0.0019088427070528269, 0.0021083618048578501, 0.0030151361133903265, 0.0027997908182442188, 0.0027306214906275272, 0.003210858441889286, 0.0038159489631652832, 0.0033021641429513693, 0.0023502474650740623, 0.0024463513400405645, 0.0029099825769662857, 0.0022447316441684961, 0.0029187542386353016, 0.0019530261633917689, 0.0023526465520262718, 0.0025412642862647772, 0.0036365371197462082, 0.0032011328730732203, 0.0031832633540034294, 0.002015585545450449, 0.0020633740350604057, 0.0017340779304504395, 0.0032368472311645746, 0.0026813435833901167, 0.0017439532093703747, 0.0018913031090050936, 0.0032235987018793821, 0.0019340818980708718, 0.001597742666490376, 0.0014875876950100064, 0.0022883324418216944, 0.0020047193393111229, 0.003696095198392868, 0.0015072239330038428, 0.0018418172840029001, 0.002557661384344101, 0.0021822347771376371, 0.0022880849428474903, 0.0017221772577613592, 0.0028197553474456072, 0.0023996678646653891, 0.0023046059068292379, 0.001916861510835588, 0.0022625064011663198, 0.0022299452684819698, 0.00163784169126302, 0.0019778122659772635, 0.0022429849486798048, 0.0018771564355120063, 0.0028073438443243504, 0.003547899192199111, 0.0010345926275476813, 0.0027154609560966492, 0.0031193264294415712, 0.0031617437489330769, 0.0013336084084585309, 0.0023732800036668777, 0.0040032700635492802, 0.0018910939106717706, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -26746, -4365, 2896, -15495, 14900, -13011, 17447, -9461, 10313, -7042, 13656, 12054, -3982, -31013, 1497, 4986, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 8.322267240146175e-05, 7.0656642492394894e-05, 6.1897262639831752e-05, 6.992977432673797e-05, 7.9866913438308984e-05, 0.00016869760293047875, 6.1547289078589529e-05, 5.6884415243985131e-05, 0.00010709349589888006, 9.9183445854578167e-05, 8.2913473306689411e-05, 6.7350578319747001e-05, 8.9194647443946451e-05, 9.2757407401222736e-05, 6.8172827013768256e-05, 8.3940474723931402e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 24,37,19,22,-33,-90,-18,-15,-6,-78,9,-7,67,-70,66,20,-76,-52,34,12,84,20,-78,8,-10,71,127,66,-11,69,60,-30,13,-1,10,-31,43,28,-8,-11,111,14,12,-32,-17,-6,-12,-44,29,-31,90,-7,-68,-14,40,35,-3,-59,6,2,-13,26,-71,-15,16,10,81,28,16,-11,29,32,1,50,1,39,79,-33,61,16,-21,53,34,36,-57,5,-15,70,16,-2,-89,-18,26,0,110,59, 
  /* [1][0][][] */ 31,42,-51,-12,-4,-50,88,-72,-63,-20,-55,-55,-10,-33,-1,-45,-25,-22,-33,-20,-15,-92,99,-46,-6,12,0,66,-55,17,-40,16,-40,19,7,9,-18,56,-56,77,34,9,0,-49,58,-47,-8,29,-74,-3,54,-98,-29,38,51,50,42,33,-62,19,-57,-4,-1,-16,32,29,92,6,-24,-127,4,-1,34,50,-28,18,-54,-23,87,-29,46,-20,69,-56,-15,-56,-11,6,-14,-39,47,-2,70,-43,-21,65, 
  /* [2][0][][] */ -2,-8,8,-19,56,36,-50,2,-48,47,25,-37,25,-10,23,30,33,-24,-127,-2,-30,-45,-14,14,1,-25,-44,7,-31,-15,-27,67,-29,-38,-6,25,-45,29,-24,-10,67,15,13,49,19,57,0,3,-73,5,-22,14,-13,38,18,-43,37,35,42,35,-32,1,-9,57,47,-6,-56,-8,11,-19,-3,-30,19,42,30,63,-43,-18,-39,-20,35,26,60,-17,1,-31,-10,-47,-21,-22,-10,70,5,8,88,-37, 
  /* [3][0][][] */ 42,-19,-31,-122,-14,-36,115,-48,47,116,-72,-21,7,-40,-6,68,75,33,-17,19,-66,18,22,5,-37,77,51,-28,-37,-20,-71,62,-6,-25,17,-22,9,-53,-37,69,15,-7,-9,27,74,-42,-37,47,59,-19,22,-43,95,39,19,5,11,-14,-4,-40,-40,43,63,-9,-21,-7,114,-39,-18,-24,-57,35,23,-56,2,-59,62,-30,127,-3,-11,-61,-27,-51,-24,-36,82,68,-60,34,-52,18,3,-68,-32,12, 
  /* [4][0][][] */ -37,68,43,23,-6,15,-41,-7,6,-23,12,-15,23,55,-34,11,-18,-43,-27,-81,43,-33,-74,20,-33,-43,-22,36,-40,127,-49,-14,3,-31,5,-29,73,52,-36,-10,21,15,13,-39,-66,-8,69,-36,23,-21,-56,-3,-78,19,44,15,0,57,-27,16,-28,-73,-28,-8,44,22,-55,0,0,8,9,-73,-26,63,52,73,-57,18,-62,32,23,79,27,-55,36,-82,-45,-75,-32,-60,-53,-26,-13,-4,57,-10, 
  /* [5][0][][] */ -13,-18,45,-17,-13,-25,-25,2,44,14,-12,3,-18,-28,18,-11,-14,-4,-41,-25,-17,19,-16,11,25,-42,52,-10,-17,36,19,77,-4,-71,29,3,-33,-26,-23,-1,-46,-2,-28,12,-11,27,-68,21,-11,22,53,-7,21,-60,-2,6,-27,-58,2,-36,45,11,20,35,-38,15,117,-18,-17,-13,22,9,1,28,37,4,-2,-2,127,33,-22,-4,-35,43,24,61,9,81,7,-39,-16,8,0,-32,-34,16, 
  /* [6][0][][] */ 21,-59,59,0,-63,99,-48,-97,-5,-67,-60,58,-4,-9,-23,81,21,44,2,-14,-97,-20,-78,-63,3,-38,10,39,-127,21,-3,-29,39,72,-28,-5,-8,-54,20,-8,-52,16,21,-19,29,44,-106,3,57,44,-74,-84,66,15,-40,-37,28,-14,35,-1,-10,-39,24,9,61,-73,-50,-64,-87,28,-24,-65,-15,-68,18,-73,95,28,-51,37,-33,51,3,-82,49,-22,-8,8,-74,56,-84,76,41,-50,58,-92, 
  /* [7][0][][] */ -28,-16,-64,54,-27,-8,44,17,-104,3,84,53,-18,-37,-18,-36,-27,-5,15,12,-39,-30,-26,-46,82,42,-3,89,-25,41,25,30,-58,-122,28,127,-5,1,-49,1,0,-25,-5,-73,32,43,82,87,-24,79,-45,5,15,-34,43,-46,-26,47,-86,-27,50,-9,-8,-58,77,-53,103,-33,-64,-14,91,17,-10,-20,-79,-12,20,-39,108,-24,3,5,-76,-21,51,35,-74,43,-8,-5,-5,29,60,-11,79,1, 
  /* [8][0][][] */ -24,-60,1,11,-14,-14,31,-3,-12,10,48,43,-4,37,-37,-10,65,-4,11,17,-16,-78,-37,-27,-22,-33,71,14,-26,54,2,-27,-26,4,11,13,-50,-18,16,-25,0,37,28,-38,21,-7,11,-8,34,13,48,12,-7,6,-25,4,-8,113,-62,-3,-16,-60,-42,-14,-81,-30,-22,13,-8,9,52,-14,-11,-127,49,-100,2,17,-58,20,-19,-8,10,61,64,-66,-38,55,-49,83,9,-18,-38,11,1,-64, 
  /* [9][0][][] */ -19,-30,-25,22,-2,25,2,29,-41,-8,74,43,-23,51,40,-53,-11,38,-31,-44,-1,29,-7,2,-29,20,2,21,44,-4,1,-1,-14,-13,-16,52,-11,-9,30,-1,-15,-27,8,-5,25,37,-10,29,-46,12,-14,20,127,7,-27,-2,13,-19,35,27,-44,-4,75,12,7,21,50,-9,44,-7,-22,20,8,-124,-43,-118,-25,-28,28,-10,-10,31,6,-55,44,22,-46,-7,-1,105,50,28,38,36,2,30, 
  /* [10][0][][] */ 16,36,17,-7,-14,21,-44,-7,66,-3,-42,24,20,0,-17,-47,-41,10,15,1,9,-8,-15,-28,14,-15,-96,46,-21,60,4,11,28,20,-23,8,16,-4,6,0,40,-8,48,-42,-14,-4,16,27,11,22,2,-20,-24,-12,-5,24,-6,2,-9,-9,-6,-41,-14,16,-6,-13,-94,-28,-57,-13,46,-15,-27,32,28,22,58,-23,-100,18,-18,32,-8,-3,-9,13,-58,-127,-17,22,5,26,42,-33,10,36, 
  /* [11][0][][] */ 19,-44,11,13,-74,38,19,16,80,-43,-20,-39,33,23,15,-11,-42,61,12,-67,11,31,17,-31,41,11,69,11,22,-66,-36,32,32,127,-125,-7,31,-22,78,1,-72,58,-31,1,-36,1,-21,-23,42,5,-37,-19,-16,11,-98,88,-20,-14,-6,-28,22,-6,-10,-74,-19,-40,-115,-97,9,-23,-102,33,48,21,-19,-7,38,58,-109,-55,-26,3,-28,-4,-34,2,60,87,19,-43,21,13,-45,14,104,32, 
  /* [12][0][][] */ 23,33,-22,-30,-2,-39,-11,27,66,-35,30,-7,11,-33,-4,10,17,-47,-30,13,0,62,2,57,-38,-42,-120,-18,66,-39,35,5,-7,-86,83,-22,35,-11,2,20,5,-54,13,37,20,4,2,-23,-60,3,-43,92,84,-25,26,-74,11,-2,-41,-40,26,47,72,18,-20,-5,33,22,127,32,39,19,4,-14,-18,-9,-9,-43,46,-74,3,-43,9,-33,-18,18,18,-97,4,29,-48,12,11,54,0,37, 
  /* [13][0][][] */ -14,19,-97,19,42,30,-13,23,18,77,-49,35,-73,-22,51,-49,7,57,65,21,-44,-60,-10,14,48,69,-25,27,10,47,60,-33,-30,63,-16,65,11,-53,-63,-45,6,-17,26,26,70,48,-31,62,-49,37,8,-1,-21,-47,58,54,8,-28,-11,-2,17,23,8,-28,20,90,121,38,12,-13,-59,-24,54,57,-91,57,25,-91,127,-29,-5,-43,50,-2,34,55,-35,-25,-15,-30,17,60,38,32,65,69, 
  /* [14][0][][] */ -12,57,8,8,-65,-47,28,24,-71,-26,57,4,-93,-8,58,-13,-46,30,-52,38,-23,22,-93,14,-42,9,-46,-106,6,4,22,75,-62,22,15,-9,-24,-77,-13,-28,16,-43,53,-19,6,38,-86,31,-2,-40,78,25,-15,24,-28,36,-48,37,-4,40,27,67,-8,40,19,-51,-7,-69,46,52,67,39,-23,31,8,7,37,2,35,28,-52,112,10,-127,90,-2,1,6,-107,-16,-14,8,-12,23,27,24, 
  /* [15][0][][] */ 75,-36,36,38,48,8,-20,1,14,10,-56,-4,81,77,-7,-17,-10,1,-83,37,11,-15,16,43,61,-43,80,30,40,-35,-31,66,78,50,1,-77,66,66,71,37,82,48,-25,-8,-69,-127,51,-49,-37,-28,-26,-4,-15,-50,-20,45,-9,-9,-15,-2,21,-59,-41,36,27,49,-57,43,-15,-19,-18,-4,-16,-112,-50,-92,-35,21,-107,13,67,-26,33,28,-58,-6,-15,-15,51,83,16,-80,-35,-47,39,-41, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0035369633696973324, 0.003002907382324338, 0.0026306335348635912, 0.0029720154125243425, 0.0033943436574190855, 0.0071696480736136436, 0.002615759614855051, 0.0024175876751542091, 0.0045514735393226147, 0.0042152963578701019, 0.003523822408169508, 0.0028623996768146753, 0.003790772520005703, 0.0039421897381544113, 0.0028973452281206846, 0.0035674700047820807, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 7900, -1639, -9601, 9848, -2644, 1407, 476, -1182, 2123, -4017, -2022, -2228, 11666, -2527, -2807, -6767, -89, -1917, -7729, 3492, -2212, -1459, -6926, -2385, -11, 6844, -11430, -4702, -2014, -3326, 2863, -1253, 16688, 1308, -4951, -1542, -1167, 10062, 1887, 6671, -3826, 6470, -3334, 9916, 1730, 2512, 14368, 3963, -5481, -296, -3238, 605, -222, -4270, 419, 3510, -4131, 7168, 396, 4952, -583, 2809, 2420, 7510, 13033, -2930, 11884, 14167, -3006, 553, 4437, -380, -108, 24, -3339, -507, 20992, 6789, 9388, 9706, 10194, -1654, 13864, 9990, -1452, -2454, 9623, -6807, 16219, -709, -7221, 291, 860, 763, 13089, -1546, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.0001482518418924883, 0.00025804294273257256, 0.00010584654228296131, 0.00014489675231743604, 0.000189866783330217, 0.00042257527820765972, 9.6375828434247524e-05, 0.00025792804080992937, 0.00042096152901649475, 0.00022973153681959957, 0.00039311044383794069, 0.00015803902351763099, 0.00014659983571618795, 0.00015744620759505779, 0.00024780284729786217, 0.00015869035269133747, 0.00030528151546604931, 0.00028135869069956243, 0.00016207217413466424, 0.0003419213171582669, 0.0002314792072866112, 0.00023001033696345985, 0.00010461306374054402, 0.00015537010040134192, 0.0032818587496876717, 0.00017037916404660791, 0.00018925213953480124, 0.00016902129573281854, 0.00036753289168700576, 0.00019976400653831661, 0.00017991640197578818, 0.00033478863770142198, 9.0019173512700945e-05, 0.00061523343902081251, 0.00013298359408508986, 0.00022155795886646956, 0.00031958919134922326, 0.0001551812601974234, 0.00029130332404747605, 0.00012175457231933251, 0.00059500226052477956, 0.00016641920956317335, 0.00020303663040976971, 0.00010066459799418226, 0.00024064755416475236, 0.00022479318431578577, 0.00015430929488502443, 0.00026447454001754522, 0.00021077904966659844, 0.00057779101189225912, 0.00035652756923809648, 0.00015289550356101245, 0.00013956759357824922, 0.00022687320597469807, 0.00026600973797030747, 0.00019827466167043895, 0.00011009129229933023, 0.0002986945619340986, 0.00052458723075687885, 0.00025377963902428746, 0.00037534584407694638, 0.00029807689134031534, 0.00018298525537829846, 0.00011777786130551249, 0.00019975294708274305, 0.00044723582686856389, 0.00014107332390267402, 0.00011751289275707677, 0.00024236339959315956, 0.0004227565077599138, 0.00026707065990194678, 0.00038030490395613015, 0.00042959960410371423, 0.00017189548816531897, 0.00014256688882596791, 0.000209457051823847, 6.7458517150953412e-05, 0.00021640564955305308, 0.00014775573799852282, 0.00015637677279300988, 0.00010849496175069362, 0.00027970067458227277, 9.0526598796714097e-05, 0.00031889360980130732, 8.721071935724467e-05, 0.00033847495797090232, 0.00011867054126923904, 0.00021769833983853459, 7.8676363045815378e-05, 0.0002207311918027699, 0.00012933803373016417, 0.00022736178652849048, 0.0002959482662845403, 0.00016536195471417159, 0.0001356942520942539, 0.00025049675605259836, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ 3,0,10,-37,100,-18,34,-22,-8,2,-4,-37,-45,5,4,-32,-11,10,-21,-30,-4,30,-3,64,-2,-20,-65,-1,26,-6,20,8,-18,2,12,-26,-1,-15,-32,13,21,-21,49,-44,-27,39,-50,-26,-33,11,-13,48,-75,20,33,-15,-7,-20,8,-44,-6,-30,-12,-56,-17,-12,-52,-69,-6,13,29,1,17,0,7,7,12,32,127,1,-45,10,-127,-21,-15,-12,17,12,-74,-12,10,-61,-19,45,16,11, 24,36,74,-86,-45,-5,118,-66,-4,-10,-27,17,-42,4,-77,76,-6,89,62,-39,-23,127,71,127,33,-20,80,64,127,40,127,-31,-127,-26,-77,-37,-19,-59,127,-56,-6,-78,-6,-60,49,-41,-36,-20,41,1,21,127,-100,49,-79,-8,-75,-15,-13,1,-4,-127,-127,-19,-61,3,-11,-93,-9,2,-54,108,-127,-7,20,-29,-113,-66,-9,-90,-127,13,10,-62,101,91,-87,30,-127,5,19,-7,5,127,-12,-102, 19,6,16,-35,93,-19,63,-30,-22,23,-3,12,-39,-7,0,-49,-10,12,-29,-34,-6,21,6,61,-8,-4,22,-11,17,5,4,8,-35,-1,1,52,-2,-13,-24,48,15,12,51,-40,-24,-48,-72,-30,-14,-2,-13,38,12,-8,3,-20,102,-27,3,-50,-16,-23,-67,-1,-30,-21,127,-36,-5,4,46,12,18,5,3,15,-10,32,-42,3,-46,-1,-121,-22,14,-16,21,-29,-114,-29,-13,36,-3,41,12,23, 
  /* [0][1][][] */ -99,5,90,-53,61,94,-49,-4,3,-23,-16,-37,-127,33,25,79,-13,50,88,11,56,-10,127,3,48,28,79,28,-5,2,-20,-6,-73,-22,106,-5,5,-127,-62,-127,-7,-4,93,-47,-82,127,-126,-75,54,62,3,-52,-117,104,64,-34,10,-51,38,-28,10,-17,66,-127,-32,27,-32,-91,-6,-1,-127,21,73,127,26,-62,-127,-41,-67,-38,-78,-2,-64,-75,48,26,-125,69,-112,127,97,-101,127,-3,-43,-13, 45,127,127,127,-127,-127,127,-38,127,127,-62,-83,-59,127,-18,127,127,-127,127,127,127,-71,107,-94,-127,-127,127,127,-116,127,-33,127,-48,127,127,-82,127,30,-12,-23,127,6,-127,-127,127,-21,77,127,127,-127,127,-121,125,127,-127,127,-99,127,-127,127,-85,108,89,-111,127,127,-20,127,-83,-127,-6,-127,0,125,127,97,46,-127,96,-127,2,127,96,127,127,70,-127,127,-44,47,16,-18,-95,-40,-127,-36, -127,-21,86,-94,38,66,-67,13,-31,-18,3,127,-123,34,24,65,-20,67,59,0,51,-7,92,2,42,19,58,16,1,-2,6,-2,-79,-39,118,127,6,-118,-80,-22,-18,-52,45,-56,-68,-92,-127,-107,51,75,-8,-31,127,22,103,-61,127,-49,41,-63,-8,-30,-116,-35,-85,6,-58,-112,-13,5,-116,9,47,-77,1,127,-90,-53,-54,4,-99,-5,-108,-94,0,30,-86,44,-65,-78,127,127,-52,-29,-51,-9, 
  /* [0][2][][] */ -27,-37,-5,-36,34,-1,-18,17,-14,-2,39,-51,2,-15,-6,-44,-8,-3,-29,-43,-17,-13,8,-24,13,2,-11,-5,6,-6,-54,5,-28,-6,21,-19,-2,-36,-11,-8,-16,-9,47,7,1,4,-72,-10,-33,10,-14,-29,-8,-44,19,-21,22,-34,9,-28,-3,11,-18,-17,-58,-12,104,15,46,28,27,-5,16,-15,-7,-38,-64,35,-33,-31,-6,0,-78,-26,4,6,42,-15,-48,3,2,-33,-16,-1,-14,-5, -45,-58,31,-82,-45,0,77,127,-64,68,127,-33,-71,16,127,115,-15,-33,82,-69,-52,-38,107,-10,30,-22,31,1,-3,14,-117,-47,-68,-36,-117,0,-74,-58,53,-74,-18,-127,-25,117,22,-19,-49,-11,34,-2,2,-20,49,18,-58,-52,2,-69,40,-75,127,18,96,-10,-112,-44,-24,-48,127,29,6,4,20,-28,9,-25,-54,-20,-15,22,-60,-15,-118,-59,54,-127,-4,17,-67,-5,45,9,10,-120,-61,127, -23,11,8,-29,43,-3,2,18,-25,-5,20,67,2,-16,-3,-44,-7,18,-14,-44,-17,-3,10,-12,-2,11,-5,-5,7,6,-48,3,-36,-6,14,7,0,-47,-13,14,-16,-54,35,-8,1,-31,-69,-2,-22,-3,-6,-17,-5,-54,14,-22,100,-28,11,-26,-2,14,-15,25,-52,-12,-25,15,36,13,26,-15,-25,-42,-14,-24,-80,22,81,-3,-22,1,-74,-9,6,11,63,0,-28,-2,6,18,0,-10,-12,6, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0063007031567394733, 0.010966824367642403, 0.0044984780251979828, 0.0061581120826303959, 0.0080693382769823074, 0.01795944944024086, 0.004095972515642643, 0.010961941443383694, 0.017890864983201027, 0.0097635900601744652, 0.016707193106412888, 0.0067166583612561226, 0.0062304926104843616, 0.0066914637573063374, 0.010531621053814888, 0.0067443395964801311, 0.01297446433454752, 0.011957744136452675, 0.0068880673497915268, 0.014531655237078667, 0.0098378658294677734, 0.0097754392772912979, 0.0044460552744567394, 0.006603228859603405, 0.13947899639606476, 0.0072411145083606243, 0.0080432156100869179, 0.0071834051050245762, 0.015620147809386253, 0.0084899701178073883, 0.0076464470475912094, 0.014228516258299351, 0.0038258146960288286, 0.026147419586777687, 0.0056518027558922768, 0.009416213259100914, 0.013582540675997734, 0.0065952036529779434, 0.012380391359329224, 0.0051745693199336529, 0.025287596508860588, 0.0070728161372244358, 0.0086290566250681877, 0.0042782453820109367, 0.010227520950138569, 0.0095537099987268448, 0.0065581449307501316, 0.011240167543292046, 0.0089581096544861794, 0.024556117132306099, 0.015152421779930592, 0.0064980587922036648, 0.0059316223487257957, 0.009642111137509346, 0.011305413208901882, 0.0084266727790236473, 0.0046788798645138741, 0.012694518081843853, 0.022294957190752029, 0.010785634629428387, 0.015952197834849358, 0.012668267823755741, 0.0077768731862306595, 0.0050055589526891708, 0.0084894997999072075, 0.019007522612810135, 0.0059956163167953491, 0.0049942978657782078, 0.010300444439053535, 0.01796715147793293, 0.011350502260029316, 0.01616295799612999, 0.018257983028888702, 0.0073055578395724297, 0.0060590924695134163, 0.0089019248262047768, 0.0028669869061559439, 0.0091972397640347481, 0.0062796184793114662, 0.0066460124216973782, 0.0046110358089208603, 0.011887278407812119, 0.0038473804015666246, 0.013552977703511715, 0.0037064554635435343, 0.014385185204446316, 0.0050434977747499943, 0.0092521794140338898, 0.0033437453676015139, 0.0093810753896832466, 0.0054968660697340965, 0.0096628759056329727, 0.012577801011502743, 0.0070278830826282501, 0.0057670054957270622, 0.010646112263202667, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 790, 4655, 97, 1749, 3071, 10229, 315, 1434, 10735, -524, 14363, 3321, 1399, 321, 3637, 452, 2335, 2549, -281, 11292, 1239, 6920, -1089, 1548, -9731, 992, 2629, 1220, 3512, 653, 2581, 3490, 1917, 8433, 2378, 2075, 3326, 1887, 3481, 1585, 10396, 1223, 1258, 1164, 1560, 11591, 3838, 8341, 1094, -848, 1756, 4488, 2278, -2573, 4592, 122, 971, 11460, 1497, 1836, 2431, 10111, 2866, -147, 11466, 8872, 1497, 3069, 4114, 3357, 3155, 1132, -2958, 3475, 1287, 2495, 110, 9486, 2648, 6416, 1636, 939, 3020, 10912, -256, 8004, 3377, 1892, -709, 1947, 698, 10608, 2424, 1312, 4852, 3373, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00036905173328705132, 0.00015335601347032934, 0.00037829892244189978, 0.00021518554422073066, 0.00021297518105711788, 8.1863770901691169e-05, 0.00022939540212973952, 0.00020929927995894104, 7.9720557550899684e-05, 0.00032285062479786575, 6.2898470787331462e-05, 0.00015375028306152672, 0.00026317304582335055, 0.00056750362273305655, 0.00014812618610449135, 0.00017780529742594808, 0.00026105120196007192, 0.00024171489349100739, 0.00022726331371814013, 8.2835074863396585e-05, 0.0002566321927588433, 0.00010269058111589402, 0.00021262707014102489, 0.00017964045400731266, 8.1674865214154124e-05, 0.00024238483456429094, 0.00021615135483443737, 0.00030261764186434448, 0.00023359502665698528, 0.00040828622877597809, 0.00022741127759218216, 0.00016265023441519588, 0.00023793804575689137, 9.8593714938033372e-05, 0.00019258396059740335, 0.00027875680825673044, 0.00018472369993105531, 0.00025275745429098606, 0.00013699768169317394, 0.00025757632101885974, 8.8729655544739217e-05, 0.00023878320644143969, 0.00030821765540167689, 0.00017351789574604481, 0.00019558887288440019, 7.8032731835264713e-05, 0.00018101042951457202, 9.6965450211428106e-05, 0.00030346011044457555, 0.00027423954452387989, 0.00024494185345247388, 0.00016501102072652429, 0.00021810544421896338, 0.00012961636821273714, 0.00016085591050796211, 0.00045843693078495562, 0.00029732275288552046, 7.5378309702500701e-05, 0.00014490375178866088, 0.00014706351794302464, 0.00017234194092452526, 9.1983289166819304e-05, 0.00021739376825280488, 0.00036839890526607633, 8.2603408372960985e-05, 9.6127951110247523e-05, 0.00028393694083206356, 0.0002127352636307478, 0.00017753496649675071, 0.00014329218538478017, 0.00018740858649834991, 0.00021352844487410039, 0.00019147526472806931, 0.00018929783254861832, 0.0002547485928516835, 0.00025376270059496164, 0.0002693845599424094, 9.2240596131887287e-05, 0.00020253518596291542, 0.00012733023322653025, 0.00022802947205491364, 0.00019404516206122935, 0.00015189075202215463, 8.7296364654321223e-05, 0.00019785728363785893, 8.9304434368386865e-05, 0.00019522919319570065, 0.00025126110995188355, 0.00023662073363084346, 0.00028045853832736611, 0.00029504095437005162, 8.7232860096264631e-05, 0.00021231512073427439, 0.00024932398810051382, 0.00012419511040206999, 0.00019044826331082731, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 32,-25,-1,68,-127,-45,75,43,61,85,-25,17,-8,20,2,57, 
  /* [1][0][][] */ -34,20,-91,11,126,127,-10,10,-30,10,-64,16,-49,64,-51,-30, 
  /* [2][0][][] */ -28,58,64,7,59,77,-2,40,35,-9,41,-18,60,-127,7,12, 
  /* [3][0][][] */ 127,-39,30,4,36,22,-26,11,45,45,-73,-29,-64,64,-37,47, 
  /* [4][0][][] */ -88,-23,14,20,-119,-4,-67,-28,-15,17,-29,-67,-15,-2,-39,127, 
  /* [5][0][][] */ -127,0,54,22,121,12,18,-10,-35,45,-29,-27,-103,98,-120,-82, 
  /* [6][0][][] */ -127,16,-46,31,-2,-56,75,20,-5,-34,-31,44,10,-1,-49,21, 
  /* [7][0][][] */ 38,111,56,-99,68,63,121,26,67,-19,1,56,127,-8,-26,5, 
  /* [8][0][][] */ -41,-41,-82,72,-55,59,-78,-70,33,-50,77,34,127,59,-115,-6, 
  /* [9][0][][] */ 5,-127,-27,55,-38,-32,9,68,11,27,36,81,-38,-12,16,-3, 
  /* [10][0][][] */ -43,-60,-93,63,-127,88,40,-66,32,-91,57,-52,16,87,-81,41, 
  /* [11][0][][] */ -41,-111,-38,16,-25,73,47,1,22,3,26,-85,27,127,-104,84, 
  /* [12][0][][] */ -15,-85,-67,68,-89,-117,19,67,84,80,-38,127,-15,-46,-49,-13, 
  /* [13][0][][] */ -78,-15,-45,-5,-17,7,36,25,-20,127,-14,-38,48,28,23,-3, 
  /* [14][0][][] */ -122,-37,-40,-48,-45,87,-24,-109,127,-79,60,-32,83,-76,-86,-102, 
  /* [15][0][][] */ -9,-127,104,-66,-40,-44,-13,54,31,-33,-106,-40,52,-31,-43,-62, 
  /* [16][0][][] */ -10,-31,18,-39,20,25,-11,-25,54,-127,56,-6,-1,-9,-63,-85, 
  /* [17][0][][] */ -38,-7,11,-74,23,2,-32,9,99,-64,50,63,109,-84,-35,-127, 
  /* [18][0][][] */ 55,11,-43,-108,16,10,127,-69,16,48,-3,46,-1,53,-5,-98, 
  /* [19][0][][] */ -42,-37,-20,-75,-127,33,-22,-13,56,-55,27,-114,-16,-29,-23,-17, 
  /* [20][0][][] */ 14,73,55,-85,77,10,-52,97,-111,-127,27,-102,-24,98,-12,-4, 
  /* [21][0][][] */ 7,-107,-120,28,78,21,47,125,-110,-96,-35,-5,127,-110,-18,25, 
  /* [22][0][][] */ 58,-18,85,2,21,-2,67,23,35,127,21,16,-14,9,97,-18, 
  /* [23][0][][] */ -112,-87,-27,63,46,43,-20,25,-47,14,-9,-108,22,42,72,127, 
  /* [24][0][][] */ 19,-28,65,31,25,-95,18,-65,51,109,-127,64,-13,-68,79,-83, 
  /* [25][0][][] */ 101,-44,79,127,51,18,-35,60,-112,56,52,-52,4,16,61,4, 
  /* [26][0][][] */ -34,20,7,54,-58,118,-16,38,-74,-37,-79,21,4,23,44,-127, 
  /* [27][0][][] */ 38,-12,-13,-43,-38,12,-93,15,-111,-23,-68,-39,-63,31,-16,127, 
  /* [28][0][][] */ -61,25,17,-25,6,-7,-127,-4,-21,-26,-16,-32,20,-77,-60,-36, 
  /* [29][0][][] */ -21,-112,-22,89,-38,10,113,20,72,65,-127,80,42,-33,-35,88, 
  /* [30][0][][] */ 36,-53,-62,10,-127,19,49,-46,22,-3,9,-26,-29,53,-9,58, 
  /* [31][0][][] */ -127,-14,2,105,-21,2,-56,0,-40,-43,8,-28,-15,-52,-19,89, 
  /* [32][0][][] */ -117,-89,-102,-22,-88,-48,-12,-18,127,68,-50,-58,19,42,18,-22, 
  /* [33][0][][] */ -15,7,-100,52,-120,-77,68,7,-127,-1,-61,-75,-19,84,61,79, 
  /* [34][0][][] */ 30,62,-11,52,-54,-30,14,23,3,-127,20,61,-31,-33,62,113, 
  /* [35][0][][] */ 36,-7,-69,-16,-127,-5,82,-28,31,67,-2,-3,20,87,19,58, 
  /* [36][0][][] */ -21,3,-61,76,127,-29,21,77,-82,18,-84,-85,21,-3,13,27, 
  /* [37][0][][] */ -125,32,2,-43,80,-89,-41,-22,-14,-5,-35,46,47,-35,-6,-127, 
  /* [38][0][][] */ 63,113,51,-108,-92,-34,-127,-67,-8,-35,39,62,-77,-118,84,-19, 
  /* [39][0][][] */ -4,-27,-14,58,32,88,49,-43,-21,67,18,-30,-39,96,50,127, 
  /* [40][0][][] */ 95,55,78,92,-49,-60,-17,41,-103,94,-7,-6,-42,2,127,13, 
  /* [41][0][][] */ -21,-17,4,52,-81,99,-3,49,-45,22,-98,19,11,47,37,-127, 
  /* [42][0][][] */ 38,-82,28,-19,127,8,49,-6,-11,-69,-86,-5,-7,-10,-11,12, 
  /* [43][0][][] */ -35,-125,-30,45,104,-3,-22,69,-67,-73,-122,-83,127,25,-61,21, 
  /* [44][0][][] */ -39,-53,-84,-89,16,82,70,17,-26,-127,-36,37,-55,35,20,105, 
  /* [45][0][][] */ 12,-80,-126,7,-127,125,-61,-64,59,-43,19,-71,41,-29,-33,101, 
  /* [46][0][][] */ 34,-88,-19,34,90,-77,4,88,-9,-40,35,64,-26,-34,44,-127, 
  /* [47][0][][] */ -110,-23,-33,123,-67,-24,43,46,19,93,127,48,-68,69,-14,79, 
  /* [48][0][][] */ 32,-1,-79,-95,35,-72,9,62,44,-76,-6,20,-71,12,-47,-127, 
  /* [49][0][][] */ 39,36,11,35,-4,-29,47,50,-24,127,-32,17,-40,-18,61,86, 
  /* [50][0][][] */ 11,-4,9,0,-127,-6,-18,-56,71,28,26,61,-22,-76,10,-4, 
  /* [51][0][][] */ 5,-24,-27,-115,-11,127,46,-48,-8,0,47,-70,89,94,-39,20, 
  /* [52][0][][] */ 29,-33,-10,-61,71,-85,-4,-31,29,-18,127,-47,47,-9,-30,81, 
  /* [53][0][][] */ -32,-51,64,-49,-37,-127,30,-118,-4,121,-113,88,-24,-38,42,-68, 
  /* [54][0][][] */ 38,78,41,-7,-127,-34,-66,-97,-30,10,51,64,-62,-34,69,19, 
  /* [55][0][][] */ 13,7,-44,78,-33,29,41,-21,-4,127,19,56,-2,-7,0,49, 
  /* [56][0][][] */ 41,-127,-63,56,-70,21,-6,36,120,7,30,49,-10,-4,41,60, 
  /* [57][0][][] */ 83,6,87,-72,112,38,-52,6,80,-29,34,127,77,-80,88,-71, 
  /* [58][0][][] */ 89,-73,9,-65,76,44,-15,117,43,127,-43,59,53,34,66,2, 
  /* [59][0][][] */ -13,45,64,-37,7,-117,15,13,-11,16,-127,-94,-104,-61,98,-11, 
  /* [60][0][][] */ 64,-27,52,20,0,-33,24,-51,46,127,-11,63,-13,-43,-8,-49, 
  /* [61][0][][] */ 72,58,23,-33,-97,-127,-37,-40,-84,-6,-34,4,-49,-86,100,105, 
  /* [62][0][][] */ -24,79,-39,46,-62,127,-26,17,-56,-13,-27,22,-22,29,64,-80, 
  /* [63][0][][] */ 17,-17,-67,-127,-9,-33,85,-3,-7,-91,-27,28,-30,69,24,-28, 
  /* [64][0][][] */ -16,27,1,-15,53,-69,17,95,-127,-25,-69,-33,-26,71,52,66, 
  /* [65][0][][] */ -76,-18,-28,-14,79,33,-49,-70,-127,-43,-31,-49,-108,124,-59,47, 
  /* [66][0][][] */ -16,51,-23,37,-37,127,-30,26,-60,13,-26,30,-20,40,55,-74, 
  /* [67][0][][] */ 5,-24,-52,-13,30,-64,72,-78,-29,36,20,127,-58,6,-27,-102, 
  /* [68][0][][] */ 24,-127,-37,85,-15,8,19,86,43,23,72,26,-67,-2,-3,-11, 
  /* [69][0][][] */ 43,60,83,-74,43,-1,-30,81,25,104,40,88,96,-71,16,-127, 
  /* [70][0][][] */ 44,16,49,-39,104,3,-106,-56,-127,-84,-10,31,-33,54,-113,-12, 
  /* [71][0][][] */ -4,-65,43,-46,62,-17,36,14,-69,85,-127,-46,12,74,3,32, 
  /* [72][0][][] */ -4,11,58,3,-41,4,-89,-74,-24,69,-27,61,41,102,-127,11, 
  /* [73][0][][] */ -11,-35,-20,-49,40,-107,26,-53,85,93,108,-10,13,-24,-67,127, 
  /* [74][0][][] */ 17,7,-41,99,-100,-12,91,32,85,47,37,118,127,8,-42,9, 
  /* [75][0][][] */ -32,36,-29,32,-47,127,-25,21,-25,34,-29,45,-28,51,29,-62, 
  /* [76][0][][] */ -84,64,-49,31,-107,2,7,20,50,24,-48,-61,41,-52,-127,49, 
  /* [77][0][][] */ 121,102,-127,79,82,112,45,46,63,27,84,-43,68,-13,69,30, 
  /* [78][0][][] */ 15,-54,-5,-53,69,-113,29,-39,45,45,127,-35,11,-26,-56,126, 
  /* [79][0][][] */ -48,82,12,16,-13,-68,-32,-29,-127,3,65,1,92,63,-99,-66, 
  /* [80][0][][] */ -83,20,64,16,64,59,1,-127,-82,58,-62,-61,-19,-101,26,64, 
  /* [81][0][][] */ 71,55,-26,-2,19,-15,78,127,-117,102,-63,-52,-37,2,97,121, 
  /* [82][0][][] */ 68,92,-5,-35,-30,-78,127,-96,44,-1,-86,40,115,-10,52,-83, 
  /* [83][0][][] */ -4,-39,19,33,11,13,-32,-92,52,-29,82,23,33,-42,-61,-127, 
  /* [84][0][][] */ -127,-84,-29,-37,-19,90,97,7,73,65,86,109,53,92,-67,12, 
  /* [85][0][][] */ 100,0,101,-77,61,-3,-21,54,30,127,-62,-6,-42,31,95,-4, 
  /* [86][0][][] */ -88,70,-38,6,28,82,21,14,95,33,127,-40,-37,62,-8,-22, 
  /* [87][0][][] */ 4,-57,26,-42,45,-127,24,-33,44,-6,62,-41,31,-35,-46,68, 
  /* [88][0][][] */ -60,28,43,0,83,-39,36,13,-64,-63,92,-50,57,121,79,-127, 
  /* [89][0][][] */ -17,34,-19,29,-23,127,-23,33,-50,14,-34,25,5,52,32,-82, 
  /* [90][0][][] */ 33,-69,24,2,107,15,71,29,-17,-100,-127,-50,-2,9,-88,45, 
  /* [91][0][][] */ 19,63,-49,-23,54,-49,-125,59,-80,8,-117,-127,-82,-108,10,70, 
  /* [92][0][][] */ 45,45,50,43,-127,-76,19,2,-22,18,-26,-40,-23,-62,16,-1, 
  /* [93][0][][] */ 5,-127,-110,56,-42,-46,-1,83,87,59,13,55,-55,57,-15,-40, 
  /* [94][0][][] */ 117,4,124,-9,24,-51,9,46,25,74,7,67,29,24,127,-13, 
  /* [95][0][][] */ -56,-62,-23,-10,127,-11,38,96,-28,-37,-97,-53,33,-4,-58,29, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0053336336277425289, 0.0022163419052958488, 0.0054672765545547009, 0.003109918674454093, 0.0030779738444834948, 0.0011831169249489903, 0.0033152832183986902, 0.0030248488765209913, 0.0011521426495164633, 0.0046659228391945362, 0.00090902543161064386, 0.00222203996963799, 0.0038034466560930014, 0.0082017127424478531, 0.0021407590247690678, 0.0025696894153952599, 0.0037727812305092812, 0.0034933278802782297, 0.0032844697125256062, 0.0011971545172855258, 0.0037089164834469557, 0.0014841115335002542, 0.0030729428399354219, 0.0025962116196751595, 0.0011803868692368269, 0.0035030099097639322, 0.0031238768715411425, 0.004373510368168354, 0.0033759772777557373, 0.0059006609953939915, 0.0032866082619875669, 0.0023506644647568464, 0.0034387437626719475, 0.0014249025844037533, 0.0027832745108753443, 0.0040286672301590443, 0.002669675974175334, 0.0036529179196804762, 0.0019799268338829279, 0.0037225612904876471, 0.0012823445722460747, 0.0034509582910686731, 0.0044544432312250137, 0.0025077266618609428, 0.0028267023153603077, 0.0011277497978881001, 0.0026160108391195536, 0.0014013703912496567, 0.0043856860138475895, 0.0039633829146623611, 0.0035399647895246744, 0.0023847830016165972, 0.0031521178316324949, 0.0018732501193881035, 0.0023247322533279657, 0.0066254520788788795, 0.0042969873175024986, 0.0010893873404711485, 0.0020941875409334898, 0.0021254010498523712, 0.0024907314218580723, 0.0013293669326230884, 0.0031418325379490852, 0.0053241988644003868, 0.0011938064126297832, 0.0013892666902393103, 0.0041035320609807968, 0.0030745065305382013, 0.0025657825171947479, 0.0020708967931568623, 0.0027084785979241133, 0.0030859697144478559, 0.0027672513388097286, 0.0027357826475054026, 0.0036816943902522326, 0.0036674458533525467, 0.0038932173047214746, 0.0013330855872482061, 0.002927092369645834, 0.0018402102869004011, 0.0032955424394458532, 0.0028043922502547503, 0.0021951654925942421, 0.001261630211956799, 0.0028594860341399908, 0.0012906513875350356, 0.0028215041384100914, 0.0036312921438366175, 0.0034197056666016579, 0.0040532611310482025, 0.0042640101164579391, 0.0012607125099748373, 0.0030684345401823521, 0.0036032963544130325, 0.0017949006287381053, 0.0027524088509380817, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -7190, 10692, -19966, 2690, 16956, -13854, -39971, -9189, -5936, 5591, -14959, -13302, 7338, -12959, -3212, -1653, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00014193217793945223, 0.00013764636241830885, 9.4457660452462733e-05, 0.00014774965529795736, 9.768247400643304e-05, 0.0001604378194315359, 0.00011025960702681914, 0.00022223436099011451, 7.0684924139641225e-05, 9.0825189545284957e-05, 0.00021358577942010015, 0.00013483737711794674, 0.000112996953248512, 9.2222981038503349e-05, 0.00012638884072657675, 0.0001715855032671243, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 25,40,31,-39,79,71,-39,54,-1,120,-2,46,-36,49,1,42,25,89,44,-73,-84,98,-13,56,59,51,33,63,-51,-51,-8,94,-32,6,-75,62,54,-127,-39,29,24,-37,62,12,-8,-53,-69,-15, 
  /* [1][0][][] */ -59,2,-83,-45,11,94,-56,14,-9,-35,-42,32,60,-12,-33,-30,-31,-34,-8,19,-62,44,-110,-43,-55,-35,49,70,-27,-25,46,-40,9,-64,-30,55,14,-61,127,-49,-33,33,-53,-18,41,57,31,20, 
  /* [2][0][][] */ 14,-1,58,-28,-17,-72,22,26,105,68,-62,13,113,-55,127,93,-66,-21,-27,27,77,-76,-33,-89,27,-35,32,-72,50,38,-48,21,40,-28,58,50,-50,2,-10,-30,34,35,77,-19,14,-85,94,-58, 
  /* [3][0][][] */ 38,19,-28,-31,30,116,2,-15,46,-51,20,-30,-52,9,4,39,-49,-70,36,-122,-16,-2,-21,-6,-45,92,127,65,-5,-46,23,45,57,-28,92,34,-45,-57,2,44,24,2,-12,-5,19,18,-2,-15, 
  /* [4][0][][] */ 95,-14,-8,-59,86,91,57,23,55,-19,-104,27,41,-22,19,-20,-97,-127,-16,-105,-16,13,-37,-33,-100,119,-93,126,-60,-69,37,85,30,-50,22,-47,-19,4,-24,29,-53,-13,-2,49,-65,118,-39,-76, 
  /* [5][0][][] */ -6,1,-65,8,-20,59,16,-24,50,55,42,90,43,-21,25,-11,-33,127,-10,33,12,-1,-64,-12,31,2,-59,-32,-19,33,22,-16,-39,9,44,10,-50,6,-78,12,83,-32,23,37,-25,11,-43,32, 
  /* [6][0][][] */ 68,25,17,74,6,-26,93,-43,5,64,127,97,29,55,-69,63,36,-35,-79,92,49,-64,-27,70,-73,85,102,-7,116,41,-34,-7,98,-65,-114,3,104,23,8,9,8,43,47,-50,64,111,46,1, 
  /* [7][0][][] */ -84,2,-27,20,-64,-50,24,50,61,115,-47,-61,-83,10,-12,-19,-64,93,8,108,-40,32,16,22,-17,-89,-27,-76,26,43,-1,5,-28,15,18,-20,3,-52,127,8,6,35,26,-10,44,72,-36,-12, 
  /* [8][0][][] */ -4,-97,59,-63,70,-61,72,-36,-26,-127,30,1,-42,3,29,40,7,6,-58,117,9,50,-7,34,82,-28,-62,-36,-122,-39,-76,-126,10,-74,-5,109,-1,32,120,26,21,-8,81,126,-11,-86,-37,106, 
  /* [9][0][][] */ 12,-42,27,-61,32,69,-28,42,11,-19,-34,-8,13,-45,100,-18,11,-111,42,42,-70,36,36,-46,-10,-59,-26,67,55,83,-34,-21,-64,24,-5,127,-22,-41,-55,-27,-26,-4,30,92,45,78,-71,13, 
  /* [10][0][][] */ -10,18,-26,5,21,27,-63,-45,56,25,60,-8,-43,-5,45,-42,-60,127,-2,42,4,-4,20,44,-41,42,0,90,35,2,-34,-4,77,7,-7,28,-11,-45,-41,30,-73,-3,21,-16,21,41,27,33, 
  /* [11][0][][] */ -31,43,-20,39,29,65,4,9,22,21,-127,-75,75,20,-9,-45,-4,25,-43,-49,-5,-11,111,3,50,7,-22,38,9,28,-8,57,23,-2,-47,0,46,80,102,20,28,-40,65,0,-56,-15,87,4, 
  /* [12][0][][] */ -62,8,28,26,-59,-51,-4,12,-35,-45,-127,-1,61,-90,19,35,44,106,92,-125,-32,50,-29,-68,-3,-26,39,-24,1,-1,-17,75,70,87,42,-34,-59,-35,31,20,-32,7,63,-7,31,-14,-36,-40, 
  /* [13][0][][] */ -63,-127,-38,-107,16,24,63,5,-119,28,123,-61,62,46,123,3,122,24,-22,-93,78,-87,121,-6,-77,18,-24,5,-42,-86,-118,20,45,-33,-79,63,32,-53,77,-94,-9,65,63,48,74,-36,110,-58, 
  /* [14][0][][] */ 67,20,-46,6,-42,17,-85,-24,-27,65,52,46,-9,-65,11,-43,54,-113,16,11,80,-55,22,-8,0,127,-92,-1,-57,-17,-95,1,121,39,88,-14,-72,9,-22,54,-14,-43,106,-22,-49,-42,-58,57, 
  /* [15][0][][] */ -56,19,42,14,84,-3,4,27,25,79,-28,58,53,-17,-26,-16,1,32,7,-36,21,-26,-64,-66,57,-65,-42,61,-45,17,15,0,-61,3,127,1,-89,15,54,-12,-39,-25,16,-2,-39,-31,-19,8, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0060321176424622536, 0.0058499705046415329, 0.004014450591057539, 0.0062793605029582977, 0.0041515049524605274, 0.0068186069838702679, 0.0046860333532094955, 0.00944496039301157, 0.0030041092541068792, 0.0038600706029683352, 0.0090773953124880791, 0.0057305884547531605, 0.0048023704439401627, 0.003919476643204689, 0.0053715258836746216, 0.0072923838160932064, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 14334, 26, 22887, 500, 14565, -1588, 36986, 994, 10346, 46835, 8240, 27751, 1410, 11013, 40407, 25989, 1352, 1494, 2899, 61963, 497, 18400, 1048, 15236, 16500, 30678, -1473, -1209, -7245, 16864, 21613, -238, -1283, -2758, 1799, 18335, 7825, 35732, 1666, 17049, 27826, -344, 533, 13960, 1070, 3717, 45978, 25300, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.8893161369487643e-05, 0.00018110356177203357, 6.5122709202114493e-05, 9.5618466730229557e-05, 0.00011979306873399764, 9.2697213403880596e-05, 6.009834396536462e-05, 0.0003375121159479022, 0.00011514897778397426, 4.2038969695568085e-05, 5.1779854402411729e-05, 9.3948416179046035e-05, 6.9423040258698165e-05, 0.00012228025298099965, 4.1220740968128666e-05, 8.0339559644926339e-05, 0.00010752963862614706, 5.8609686675481498e-05, 0.00016080016212072223, 3.2859523344086483e-05, 5.7172495871782303e-05, 6.5026208176277578e-05, 0.00011159366113133729, 0.00012001844879705459, 6.0817052144557238e-05, 7.8796329034958035e-05, 6.3580744608771056e-05, 4.5766599214402959e-05, 0.00017760129412636161, 7.7924421930219978e-05, 8.1850128481164575e-05, 0.00017169470083899796, 0.00015142092888709158, 0.00012777495430782437, 8.6135609308257699e-05, 6.0659927839878947e-05, 9.4505587185267359e-05, 4.6891040256014094e-05, 8.3970662672072649e-05, 0.00014832572196610272, 4.9563277570996433e-05, 0.00018392542551737279, 0.00025386750348843634, 8.6260792159009725e-05, 0.0001785278000170365, 5.4857518989592791e-05, 4.2067593312822282e-05, 6.4308129367418587e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -94,89,-127,107,-90,68,-55,77,-76,-85,73,-71,54,-104,-77,-63,64,78,97,-104,101,-119,93,-96,-99,-55,74,120,-92,-39,-64,113,116,-94,63,-92,-94,-116,104,-27,-2,-54,106,-91,102,57,-127,-78, -127,124,-75,127,-66,114,-50,65,-116,-116,106,-90,101,-127,-85,-73,89,115,127,-127,106,-91,119,-127,-125,-87,67,127,52,-64,-104,112,119,-127,91,-125,-95,-127,118,-85,-107,114,127,-75,-24,102,-123,-107, -45,60,-35,37,-24,78,-29,38,-40,-50,32,-39,53,-36,-26,-26,34,53,49,-53,41,-9,31,-29,-85,-50,20,28,96,-58,-46,18,54,-95,35,-48,9,-77,49,-38,-119,-41,56,-45,-88,55,-54,-79, 
  /* [0][1][][] */ -95,91,-82,116,-82,127,-118,95,-97,-106,74,-112,89,-114,-84,-108,86,92,-38,-98,127,-127,111,-75,-127,-83,113,108,-127,-101,-102,127,127,49,94,-116,-90,-124,110,-68,-104,-88,98,-127,127,64,-120,-105, -115,127,-87,127,-127,126,-127,127,-127,-127,127,-127,127,-107,-127,-127,127,127,-51,-110,113,-105,127,-100,-105,-127,127,125,52,-127,-127,111,120,64,127,-127,-127,-106,127,-127,-127,127,104,-103,-43,127,-126,-127, -86,63,-123,40,-38,53,-67,63,-59,-50,33,-55,59,-33,-40,-35,54,60,-49,-41,46,-22,29,-43,-127,-66,52,64,123,-74,-91,82,52,21,58,-77,17,-50,64,-43,-61,-76,29,9,-107,82,-30,-70, 
  /* [0][2][][] */ -81,44,-20,45,-44,52,-74,-40,-52,-77,25,-80,38,-65,-38,-69,57,40,-73,-45,61,-43,47,-32,-34,-29,63,18,-103,-93,-30,46,58,76,41,-88,-60,-60,40,-56,-108,-38,49,-91,82,35,-64,-44, -96,67,-108,63,-60,50,-82,17,-62,-71,53,-94,56,-94,-59,-62,73,50,-99,-34,54,-69,53,-46,-77,-50,79,44,41,-106,-49,95,53,82,62,-88,-74,-45,38,-46,-68,69,51,-91,-24,71,-71,-55, -47,50,-109,0,-17,1,-45,-23,-10,-17,11,-25,34,-19,-16,1,34,22,-58,-19,32,-18,-13,-17,-13,-20,37,20,76,-38,-30,16,13,57,19,-39,13,-13,24,-10,14,-38,20,-7,-64,45,-30,-58, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0029279591981321573, 0.007696901448071003, 0.0027677151374518871, 0.0040637846104800701, 0.0050912052392959595, 0.0039396313950419426, 0.002554179634898901, 0.014344264753162861, 0.004893831443041563, 0.0017866562120616436, 0.002200643764808774, 0.0039928075857460499, 0.0029504792764782906, 0.0051969108171761036, 0.0017518814420327544, 0.0034144311212003231, 0.0045700096525251865, 0.0024909116327762604, 0.0068340068683028221, 0.0013965297257527709, 0.0024298310745507479, 0.0027636138256639242, 0.0047427304089069366, 0.0051007838919758797, 0.0025847246870398521, 0.0033488438930362463, 0.0027021814603358507, 0.0019450803520157933, 0.0075480551458895206, 0.0033117877319455147, 0.0034786304458975792, 0.0072970245964825153, 0.0064353891648352146, 0.0054304352961480618, 0.003660763381049037, 0.0025780468713492155, 0.004016487393528223, 0.0019928691908717155, 0.0035687531344592571, 0.0063038431107997894, 0.0021064393222332001, 0.007816830649971962, 0.010789369232952595, 0.0036660835612565279, 0.0075874314643442631, 0.0023314445279538631, 0.0017878727521747351, 0.0027330955490469933, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1308, -1594, 780, -2343, 3473, -909, 4271, -3842, 962, 320, 1854, 3734, 360, -560, 476, 4453, -1860, 3830, 5600, 903, -639, 2095, -929, 4151, 2057, 1642, 1439, -994, 7864, -266, 2855, -1640, -808, 3721, -1124, 2663, 2045, 858, 164, 5036, 1792, 9171, -3321, 1823, 9300, -143, 2018, 2801, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00029393710428848863, 0.00024579028831794858, 0.00028807370108552277, 0.00020265248895157129, 0.0002129256899934262, 0.00019054961740039289, 0.00017430540174245834, 0.00015116303984541446, 0.00029667769558727741, 0.00041012259316630661, 0.00021160976029932499, 0.00019784695177804679, 0.00034123938530683517, 0.0002864428679458797, 0.0002693895366974175, 0.00017790371202863753, 0.00023926823632791638, 0.00020645222684834152, 0.0001616672525415197, 0.00024863763246685266, 0.00035537409712560475, 0.00028149934951215982, 0.00021018023835495114, 0.00018895856919698417, 0.00019995309412479401, 0.00025658064987510443, 0.00024657559697516263, 0.00026108484598807991, 0.00011308859393466264, 0.00033889591577462852, 0.00016853556735441089, 0.00018656624888535589, 0.00021459149138536304, 0.00019991013687103987, 0.00023206110927276313, 0.00019339450227562338, 0.00021748045401182026, 0.00025534722954034805, 0.00031407855567522347, 0.00017203157767653465, 0.0002905194996856153, 0.00010131697490578517, 0.00015064669423736632, 0.00024256910546682775, 0.00010145012493012473, 0.00022242646082304418, 0.00025283204740844667, 0.000215764986933209, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 67,28,127,-31,72,103,-70,-55, 
  /* [1][0][][] */ 15,-78,-127,8,44,22,20,-2, 
  /* [2][0][][] */ -127,-3,-46,-25,56,29,-69,-35, 
  /* [3][0][][] */ 41,57,127,-82,-6,-104,5,-16, 
  /* [4][0][][] */ -127,23,-56,-29,45,10,-40,-57, 
  /* [5][0][][] */ -115,27,-54,-1,7,41,-92,-127, 
  /* [6][0][][] */ -34,-127,-105,43,84,11,4,41, 
  /* [7][0][][] */ -52,-127,-94,-72,-52,-63,11,67, 
  /* [8][0][][] */ 90,30,-15,-3,93,-77,-127,8, 
  /* [9][0][][] */ -27,50,-53,77,-52,-40,127,-32, 
  /* [10][0][][] */ -18,125,38,55,127,-34,-8,44, 
  /* [11][0][][] */ -77,-33,-34,-23,-86,106,127,-2, 
  /* [12][0][][] */ 64,31,-127,37,-7,-37,-64,-17, 
  /* [13][0][][] */ 55,-42,-61,1,24,-127,-30,-20, 
  /* [14][0][][] */ 14,-79,64,10,127,-86,-59,34, 
  /* [15][0][][] */ -47,-39,4,127,61,61,-74,28, 
  /* [16][0][][] */ 121,45,-28,22,68,-123,-127,-28, 
  /* [17][0][][] */ 58,127,57,75,42,65,24,-87, 
  /* [18][0][][] */ 30,-15,-8,-10,127,-4,12,-9, 
  /* [19][0][][] */ 12,117,26,21,-127,32,25,-29, 
  /* [20][0][][] */ -49,19,71,-127,28,31,-19,90, 
  /* [21][0][][] */ -28,53,24,-127,29,24,-1,112, 
  /* [22][0][][] */ -67,-53,-106,12,-127,119,100,-22, 
  /* [23][0][][] */ 92,34,-127,12,8,-55,-70,-12, 
  /* [24][0][][] */ -64,58,32,-23,-12,83,-127,125, 
  /* [25][0][][] */ -105,-55,-127,18,-59,-86,63,98, 
  /* [26][0][][] */ 60,-5,-36,-23,114,-11,127,-39, 
  /* [27][0][][] */ 127,-76,27,102,-3,29,-22,106, 
  /* [28][0][][] */ 43,51,72,-1,127,-47,55,-29, 
  /* [29][0][][] */ -13,-2,-21,-35,-78,23,127,-38, 
  /* [30][0][][] */ 38,-114,-66,-74,-127,-6,26,-52, 
  /* [31][0][][] */ 2,27,-3,-2,-127,11,-23,-9, 
  /* [32][0][][] */ 32,-46,-35,72,-20,-119,114,-127, 
  /* [33][0][][] */ 48,127,59,41,41,-20,-9,-29, 
  /* [34][0][][] */ -126,-34,127,9,-30,98,87,13, 
  /* [35][0][][] */ -46,105,127,-21,-64,-79,-30,58, 
  /* [36][0][][] */ -121,1,117,-28,-9,127,101,20, 
  /* [37][0][][] */ -11,-82,-16,-127,-42,-71,56,43, 
  /* [38][0][][] */ 46,-13,89,-61,55,58,-127,12, 
  /* [39][0][][] */ -14,90,-127,-47,-25,-11,10,71, 
  /* [40][0][][] */ 63,-47,16,35,7,2,11,127, 
  /* [41][0][][] */ -51,83,127,15,7,68,-77,13, 
  /* [42][0][][] */ 62,-127,-107,-31,-87,-5,8,-87, 
  /* [43][0][][] */ -9,-73,26,-65,127,-37,17,36, 
  /* [44][0][][] */ 12,116,127,8,21,58,-72,12, 
  /* [45][0][][] */ -38,47,14,78,-112,62,-127,21, 
  /* [46][0][][] */ -57,-44,84,66,-127,-118,-31,-2, 
  /* [47][0][][] */ -20,68,54,-108,-127,41,-16,60, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0034759929403662682, 0.0029066263232380152, 0.0034066545777022839, 0.0023964943829923868, 0.0025179814547300339, 0.002253370126709342, 0.0020612720400094986, 0.0017875989433377981, 0.0035084020346403122, 0.004849960096180439, 0.0025024197530001402, 0.0023396657779812813, 0.0040353722870349884, 0.0033873687498271465, 0.0031857022549957037, 0.0021038244012743235, 0.0028294988442212343, 0.0024414286017417908, 0.0019118179334327579, 0.0029402978252619505, 0.0042025242000818253, 0.0033289087004959583, 0.0024855148512870073, 0.0022345550823956728, 0.0023645723704248667, 0.0030342291574925184, 0.0029159130062907934, 0.0030874940566718578, 0.0013373444089666009, 0.0040076593868434429, 0.0019930400885641575, 0.0022062642965465784, 0.0025376805569976568, 0.0023640643339604139, 0.0027442700229585171, 0.0022870127577334642, 0.0025718444958329201, 0.0030196432489901781, 0.0037141782231628895, 0.0020343826618045568, 0.0034355774987488985, 0.0011981375282630324, 0.0017814928432926536, 0.0028685336001217365, 0.0011997121619060636, 0.0026303341146558523, 0.0029898995999246836, 0.0025515579618513584, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 2565, -2661, 21653, -5725, 6507, -15058, 2548, -10083, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00010054399899672717, 9.1251560661476105e-05, 0.00016840070020407438, 0.00010986231063725427, 0.00014471623580902815, 0.00016546816914342344, 8.0321377026848495e-05, 9.7248419479001313e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -44,-41,-15,-69,5,-15,78,77,-91,-81,-33,2,-50,-8,-54,36,-78,16,0,127,47,-28,9,91,65,81,21,1,-94,-62,-81,-57,-48,102,23,-59,19,-38,91,-5,34,14,-9,-94,29,-30,-24,-96, 
  /* [1][0][][] */ -12,53,-16,-22,-65,55,-23,-40,-28,66,-16,8,50,34,-54,8,-24,-115,78,-54,127,17,-50,27,56,-5,-76,59,39,-14,76,31,-37,-14,1,-7,0,106,-15,-25,81,29,-17,16,111,21,-22,62, 
  /* [2][0][][] */ -26,-31,115,9,90,-43,-14,23,-33,3,-5,37,6,-43,-49,-127,-39,-98,-29,18,-96,26,-34,-36,-45,19,5,-42,-37,5,-27,-16,-6,0,18,1,19,-26,-54,9,42,-30,25,-45,-41,-37,-47,-55, 
  /* [3][0][][] */ 48,20,63,21,21,-37,19,66,-47,-21,52,-28,-68,46,-28,58,61,38,-36,24,-115,-60,127,-4,8,11,-60,-38,-51,57,114,-68,0,-104,-14,36,-22,-75,-19,68,-61,-61,61,-1,-96,-64,64,-17, 
  /* [4][0][][] */ 14,-21,71,-35,-4,-15,-6,-2,-58,-13,-28,7,46,-67,47,-97,38,44,-15,-34,12,29,13,18,-10,7,52,-12,17,17,-127,-15,-17,-24,-2,17,49,0,37,-2,-40,-10,-71,26,-22,-95,3,19, 
  /* [5][0][][] */ 28,-55,56,35,36,22,31,7,-82,-4,-46,31,38,11,7,-41,91,73,-2,-20,90,-59,127,-93,-6,37,8,40,16,14,-21,-41,-20,-51,-28,15,45,24,64,5,-90,34,42,24,54,-15,71,2, 
  /* [6][0][][] */ -60,48,-127,85,38,32,40,13,-13,-13,56,-68,-95,-16,-31,43,-115,33,7,92,29,42,-97,-90,5,-16,22,69,-29,-46,-50,18,40,69,-43,-31,-7,-15,81,15,60,68,-114,-53,-42,117,-62,-31, 
  /* [7][0][][] */ 34,73,-91,11,1,60,116,77,37,86,-116,-8,-43,11,-63,-61,34,29,127,110,70,12,109,24,104,101,-53,100,-84,26,8,-71,23,-79,-40,14,-20,94,-57,83,-85,73,-7,-85,88,-32,55,-51, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0042731198482215405, 0.0038781913463026285, 0.0071570295840501785, 0.0046691480092704296, 0.0061504398472607136, 0.0070323972031474113, 0.0034136585891246796, 0.0041330577805638313, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 239, 15664, -865, -1108, 1566, -824, 4599, -3908, -3677, 220, -8824, -24, -812, -900, -3533, 5671, 6960, 3261, 417, -4945, -8297, -1294, 19324, -7358, -3989, -17, 4417, -6610, 809, 249, -7015, 9005, 5910, 188, 4558, 119, 43, -782, 9409, 2193, 5806, -2469, 5099, 7786, 1288, 9273, 1602, 6, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00033267619437538087, 0.00011882140097441152, 0.00085239589679986238, 0.00027710062568075955, 0.00023591271019540727, 0.00035438901977613568, 0.00021208246471360326, 0.0003240785445086658, 9.363508434034884e-05, 0.00028638137155212462, 0.00018114308477379382, 0.0019106084946542978, 0.00052687473362311721, 0.00069073069607838988, 0.00033635858562774956, 0.00063837674679234624, 0.00018457295664120466, 6.1318249208852649e-05, 0.00028753792867064476, 0.00030516574042849243, 0.00027093218523077667, 0.00020448693248908967, 8.3179344073869288e-05, 0.00046589173143729568, 0.00016619730740785599, 0.00045690516708418727, 0.00054434384219348431, 0.00023915145720820874, 0.00031094360747374594, 0.00043643612298183143, 0.00017106020823121071, 0.00011872856703121215, 0.00011819208157248795, 0.00019823628826998174, 0.00012988621892873198, 0.00041708356002345681, 0.0026433714665472507, 0.00032456355984322727, 0.00013255087833385915, 0.00018663656373973936, 0.00015715156041551381, 0.00017607389600016177, 0.00026821717619895935, 0.00018379029643256217, 0.00037182832602411509, 8.4775325376540422e-05, 5.5451087973779067e-05, 0.00017881862004287541, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 6,-68,11,8,-29,-108,-49,77,-41,-10,15,6,45,-2,-11,3,98,13,19,14,12,-11,-86,24,11,-15,-4,-24,-69,69,-15,-116,56,-3,-48,-61,-15,-25,11,-12,-19,26,9,4,-16,76,127,-16, -127,-102,-22,127,-76,59,-103,127,19,9,17,-7,49,23,3,-42,-34,68,13,13,4,127,9,127,127,-35,-41,49,56,-123,-10,-68,72,-2,-42,-127,20,13,-62,-62,-127,-4,-86,-127,25,58,43,119, -4,-26,13,6,-28,21,30,48,1,-36,14,-3,-17,1,5,6,-55,33,-72,-31,-7,-38,127,29,-46,-3,20,-6,5,41,14,24,6,-11,-49,80,4,12,20,48,32,-30,22,-34,-17,22,-28,-22, 
  /* [0][1][][] */ -19,-38,-26,5,27,-112,120,-52,-12,11,31,34,127,14,4,-38,-22,-46,21,49,74,-55,41,17,-46,127,-83,-17,127,-93,45,-127,-51,2,-96,19,8,-63,-40,8,123,127,-3,-121,-76,-46,-5,96, 91,-127,127,6,127,64,-77,-55,38,127,127,-127,-92,127,127,127,127,122,122,127,127,115,8,5,124,-103,-127,127,34,127,127,10,-127,127,127,125,-127,127,-127,-127,51,35,-127,-40,127,-127,-15,77, 30,17,-38,-6,-54,127,-127,88,99,-76,17,59,-29,9,21,-69,11,-10,-127,17,21,-113,-32,4,80,-11,-19,94,-84,-33,33,-34,-29,15,78,-16,36,7,-2,-109,124,-4,25,29,-68,76,114,-87, 
  /* [0][2][][] */ -9,6,5,-23,-3,-75,-24,10,10,3,14,4,-13,-5,3,-7,-45,26,10,-32,11,-11,81,0,-95,-1,43,-16,15,-6,-9,24,-17,-8,-76,28,0,-19,33,44,-29,6,-6,-2,-26,33,-25,18, 37,-28,-35,-23,28,47,110,-99,127,-25,4,8,-73,-15,-13,-74,-20,127,16,30,12,43,-22,-23,-76,55,82,12,-94,10,-36,-24,-31,-3,-42,-7,50,-18,3,117,-117,2,-21,45,31,70,2,-127, -8,6,5,-20,-15,18,-12,-57,-21,-24,14,5,22,-11,0,9,32,45,-26,-12,-6,-16,-44,1,20,-25,28,-17,-21,0,-15,16,34,-14,-52,-51,-6,16,39,4,-5,-10,1,2,-22,7,59,-52, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.014138737693428993, 0.0050499094650149345, 0.036226823925971985, 0.011776776053011417, 0.010026290081441402, 0.015061533078551292, 0.009013504721224308, 0.013773337937891483, 0.0039794910699129105, 0.012171207927167416, 0.007698581088334322, 0.081200860440731049, 0.02239217609167099, 0.029356054961681366, 0.014295239001512527, 0.027131011709570885, 0.0078443503007292747, 0.0026060256641358137, 0.012220362201333046, 0.012969544157385826, 0.011514618061482906, 0.0086906943470239639, 0.0035351219121366739, 0.019800398498773575, 0.0070633855648338795, 0.019418468698859215, 0.023134613409638405, 0.010163936764001846, 0.013215103186666965, 0.01854853518307209, 0.0072700586169958115, 0.0050459639169275761, 0.0050231632776558399, 0.0084250420331954956, 0.0055201645009219646, 0.017726050689816475, 0.11234328150749207, 0.013793950900435448, 0.0056334119290113449, 0.007932053878903389, 0.0066789411939680576, 0.0074831405654549599, 0.011399229988455772, 0.0078110876493155956, 0.01580270379781723, 0.0036029512993991375, 0.0023566712625324726, 0.0075997915118932724, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2761, 4624, 14930, 1581, 2798, -1154, 7427, 16608, 4719, -459, 2909, -2901, 24019, -1733, 2321, 24653, -316, 2551, 342, 2822, 3908, 4716, 636, 26649, 6131, 4918, 18947, 1808, 6448, 7130, 661, 1264, 890, 1236, -423, 462, -3019, -434, 2539, 2250, 4082, 2090, 5177, 6118, 5174, 3235, 1923, 6541, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00021949913934804499, 0.00017550139455124736, 6.1547150835394859e-05, 0.00016648044402245432, 0.0001850293338065967, 0.00027871262864209712, 0.00011179465218447149, 5.9607733419397846e-05, 0.00012622003850992769, 0.00023894704645499587, 0.00025304892915301025, 0.00016522490477655083, 4.1803879867075011e-05, 0.00023206768673844635, 0.00020188893540762365, 4.4279357098275796e-05, 0.00032514182385057211, 0.00017723023483995348, 0.0002611978561617434, 0.00022050415282137692, 0.00019101785437669605, 0.00016056254389695823, 0.00035283833858557045, 4.1407351091038436e-05, 0.0001320153969572857, 0.0001292078522965312, 5.4725442169001326e-05, 0.00023980371770448983, 0.00012173932191217318, 0.00010981922969222069, 0.00040379524580202997, 0.00035314395790919662, 0.00022700233967043459, 0.00024932966334745288, 0.00028077949536964297, 0.00027230405248701572, 0.00018186312809120864, 0.00029375372105278075, 0.00021386919252108783, 0.00023258672445081174, 0.00017708919767756015, 0.00023403136583510786, 0.00016193484771065414, 0.00014029184239916503, 0.00013883378414902836, 0.00021790190658066422, 0.0003335606015753001, 0.00012557585432659835, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 59,127,-79,-66,22,67,14,63, 
  /* [1][0][][] */ 61,-78,42,-127,-52,65,-84,-37, 
  /* [2][0][][] */ -36,127,124,51,112,-5,53,13, 
  /* [3][0][][] */ 112,49,-94,55,-17,-110,-127,-41, 
  /* [4][0][][] */ -43,37,19,-48,-48,116,127,42, 
  /* [5][0][][] */ 23,85,-127,-72,39,73,18,-32, 
  /* [6][0][][] */ -1,127,79,61,81,12,21,-90, 
  /* [7][0][][] */ 127,-8,-29,31,36,2,85,26, 
  /* [8][0][][] */ 48,127,59,94,117,73,88,-74, 
  /* [9][0][][] */ 60,115,-127,-87,27,97,3,65, 
  /* [10][0][][] */ -78,-39,30,-51,-18,-39,-53,127, 
  /* [11][0][][] */ 14,-123,-127,-24,24,-8,44,-12, 
  /* [12][0][][] */ -13,-99,-116,-26,-127,36,-57,44, 
  /* [13][0][][] */ -6,12,-100,99,-127,-33,-12,-18, 
  /* [14][0][][] */ -56,-43,-127,-8,29,-8,-17,-58, 
  /* [15][0][][] */ 22,-107,-127,21,-88,-10,-34,-11, 
  /* [16][0][][] */ 127,-67,-22,59,-81,23,31,99, 
  /* [17][0][][] */ -13,127,111,-39,-57,-31,-30,-31, 
  /* [18][0][][] */ 11,-127,47,83,0,-70,49,-104, 
  /* [19][0][][] */ 127,-43,-57,43,-89,2,34,103, 
  /* [20][0][][] */ -28,-127,74,64,-17,-85,5,-73, 
  /* [21][0][][] */ 4,-65,-15,-36,127,-14,43,9, 
  /* [22][0][][] */ -127,33,-77,51,46,53,-97,-105, 
  /* [23][0][][] */ -83,-45,54,3,-83,127,107,-43, 
  /* [24][0][][] */ -34,53,-7,-41,-37,127,120,-10, 
  /* [25][0][][] */ -39,-76,-127,-52,-60,-12,-33,-42, 
  /* [26][0][][] */ -15,73,-6,127,-80,38,-49,3, 
  /* [27][0][][] */ 24,-117,29,73,8,-56,3,-127, 
  /* [28][0][][] */ 2,127,49,60,112,-11,7,-67, 
  /* [29][0][][] */ 127,12,-59,-5,114,-112,-101,36, 
  /* [30][0][][] */ 26,-13,27,-127,19,-28,14,-21, 
  /* [31][0][][] */ 46,-32,5,65,-18,34,14,127, 
  /* [32][0][][] */ -75,-56,15,-52,-56,127,65,86, 
  /* [33][0][][] */ -30,55,59,-45,28,127,-93,70, 
  /* [34][0][][] */ 27,127,-72,-55,4,32,-67,53, 
  /* [35][0][][] */ 7,-127,32,55,-25,-68,39,-85, 
  /* [36][0][][] */ -15,-34,-86,0,-127,-60,-27,12, 
  /* [37][0][][] */ -44,-127,60,75,-27,-75,-14,-56, 
  /* [38][0][][] */ -85,24,73,-73,-127,-90,-60,103, 
  /* [39][0][][] */ 83,-127,99,45,-16,-93,0,-81, 
  /* [40][0][][] */ -2,51,28,35,-127,-6,-36,3, 
  /* [41][0][][] */ 97,127,-73,-106,36,16,-17,13, 
  /* [42][0][][] */ -14,-46,-16,7,127,16,57,16, 
  /* [43][0][][] */ 127,33,78,17,-75,-25,67,109, 
  /* [44][0][][] */ 81,26,-41,7,88,-120,-127,7, 
  /* [45][0][][] */ 40,15,19,18,66,-127,-2,-47, 
  /* [46][0][][] */ 55,-35,-11,127,39,57,25,70, 
  /* [47][0][][] */ -87,-100,47,80,-59,22,127,-62, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0034773254301398993, 0.0027803091797977686, 0.00097503559663891792, 0.0026373984292149544, 0.0029312516562640667, 0.0044153910130262375, 0.0017710610991343856, 0.00094431114848703146, 0.0019995893817394972, 0.0037854209076613188, 0.0040088240057229996, 0.0026175079401582479, 0.00066226086346432567, 0.0036764373071491718, 0.0031983428634703159, 0.00070147763472050428, 0.005150926299393177, 0.0028076975140720606, 0.0041379202157258987, 0.0034932468552142382, 0.0030261222273111343, 0.0025436463765799999, 0.0055896970443427563, 0.00065597903449088335, 0.002091399859637022, 0.002046922454610467, 0.00086696544894948602, 0.0037989923730492592, 0.0019286053720861673, 0.0017397662159055471, 0.0063969609327614307, 0.0055945385247468948, 0.0035961917601525784, 0.003949903417378664, 0.0044481344521045685, 0.0043138656765222549, 0.0028810922522097826, 0.0046536731533706188, 0.0033881352283060551, 0.0036846599541604519, 0.0028054632712155581, 0.0037075462751090527, 0.0025653867051005363, 0.0022225161083042622, 0.0021994174458086491, 0.003452021861448884, 0.0052842972800135612, 0.0019893841817975044, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 6995, 13732, -4830, 7041, -2186, 4912, -12625, -16990, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00026047055143862963, 0.00012739298108499497, 0.00013848886010237038, 0.00015511330275330693, 0.0001940863294294104, 0.00017253703845199198, 0.00022341526346281171, 0.00013334433606360108, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -42,-3,32,11,-30,-9,11,8,-40,-7,-61,-55,-25,-55,-11,-29,41,-37,39,37,-13,27,-36,13,3,-32,50,-17,-3,-17,17,9,80,34,34,-127,22,0,-17,-34,2,-14,41,48,36,8,27,2, 
  /* [1][0][][] */ -6,32,60,-27,-12,44,-44,-26,5,28,-14,-82,16,84,-17,59,-17,17,-16,-57,15,-76,-21,19,-71,-5,-4,-110,-26,-8,30,-45,41,76,-39,8,127,-24,1,44,-28,37,-74,-28,117,-16,-27,-23, 
  /* [2][0][][] */ -13,-24,-63,12,-7,41,28,6,-5,44,-1,37,64,-89,16,-55,36,-92,25,36,-23,42,-8,22,-13,64,-30,-71,7,5,12,-63,-46,-81,32,-24,89,22,-14,-61,-2,25,76,29,127,14,19,24, 
  /* [3][0][][] */ -10,17,-73,46,13,-33,-72,-102,18,-19,-29,-1,5,28,37,82,-6,6,-32,18,10,-101,23,-60,-75,-8,127,-21,-44,5,-57,10,-2,-79,13,-10,-14,-38,-19,97,-44,-33,2,22,40,6,-36,44, 
  /* [4][0][][] */ -31,-44,-6,9,26,-31,-13,-7,26,-30,56,-72,8,26,7,5,-18,-20,11,-10,-3,-51,5,-15,15,-8,40,52,35,20,-17,34,-12,-4,3,-2,-68,93,36,-21,24,-20,-19,-29,-74,12,127,10, 
  /* [5][0][][] */ 50,-26,2,13,24,-41,34,-127,26,-26,-10,115,-84,71,25,-65,-3,-96,8,4,-34,63,-34,-51,-59,76,-27,-1,-32,51,-50,-43,31,59,38,-3,-46,-16,-50,-43,24,-39,-48,-6,-32,52,87,18, 
  /* [6][0][][] */ 50,-20,18,-9,-35,-20,-34,20,-38,7,-40,127,-42,-38,-5,58,7,46,19,32,35,-79,-22,23,16,38,-63,6,13,-43,16,37,8,15,-12,0,13,7,4,-6,-9,-17,39,60,-2,-38,75,-12, 
  /* [7][0][][] */ -28,4,-2,66,31,28,6,34,17,-1,70,-5,117,108,56,55,43,46,-15,1,27,-27,-85,-30,19,-4,-33,60,25,-21,-36,-13,44,11,34,-101,-83,40,40,52,-37,34,82,127,-64,-26,-108,58, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.011069998145103455, 0.0054142014123499393, 0.0058857765980064869, 0.0065923151560127735, 0.0082486690953373909, 0.007332824170589447, 0.0094951484352350235, 0.0056671341881155968, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 12785, 3411, 3946, -479, 2398, -1926, -736, 34155, -1131, 671, 8450, 59848, 1672, 5676, 146, 13379, -1269, 14363, 815, 6985, 14655, 628, 2249, -7515, 10333, 1850, -187, 14991, -1548, -2893, -10915, 10277, 5998, 567, 356, 2622, -9061, 5880, 1393, 19582, -898, -595, 7440, 1878, 527, -51, 4823, -1094, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.8770477557554841e-05, 7.9333782196044922e-05, 0.00016458048776257783, 0.0001897743932204321, 0.00088203995255753398, 0.00013280392158776522, 0.0001699743588687852, 9.8634263849817216e-05, 0.00012328720185905695, 7.5375675805844367e-05, 6.6419350332580507e-05, 5.2840612625004724e-05, 8.3855818957090378e-05, 6.2282219005282968e-05, 0.00028554227901622653, 0.00014032155741006136, 0.00013849008246324956, 0.00029617128893733025, 0.00016794582188595086, 0.00013249363109935075, 0.00012296058412175626, 0.00039176552672870457, 0.00012858293484896421, 0.00027546033379621804, 0.00012901460286229849, 4.9126258090836927e-05, 6.623786612180993e-05, 8.1650869105942547e-05, 0.00011523506691446528, 0.00077310611959546804, 0.00024115301494020969, 7.2309856477659196e-05, 0.00010125629341928288, 0.00012983992928639054, 0.00018045229080598801, 7.165584247559309e-05, 8.5170395323075354e-05, 5.8634614106267691e-05, 0.00014850877050776035, 5.3137689974391833e-05, 0.00015063369937706739, 0.00012902851449325681, 6.3250852690543979e-05, 8.3934311987832189e-05, 7.9471203207504004e-05, 0.00042705758824013174, 5.6525430409237742e-05, 0.00020093350030947477, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -57,-100,-22,-21,127,-46,51,-63,-93,-87,-32,-43,127,32,59,-110,64,-35,6,-35,-97,111,-6,9,-35,93,62,-30,77,-69,23,-36,-106,-83,41,83,18,90,115,-70,-127,-11,33,80,54,-127,96,99, -40,-127,-90,55,-101,104,54,-59,-57,48,67,-104,122,85,90,-73,-82,-88,34,-53,-87,113,-60,105,-97,126,87,-121,91,-46,4,-127,-41,-88,71,127,117,127,103,-67,-126,-72,63,103,78,107,103,91, -10,-65,-75,102,-49,-23,38,-12,95,27,52,-94,14,55,-29,-8,-86,-28,39,-30,-41,36,-66,-15,-71,71,25,-82,39,66,126,-67,17,1,-14,43,85,48,40,-23,-13,96,68,41,39,29,33,-111, 
  /* [0][1][][] */ -114,-76,-17,-76,-99,-67,88,-127,-127,-127,92,-70,108,46,-127,-80,127,-127,-67,-70,-105,66,-45,8,-17,97,103,-57,-111,-76,11,-47,-103,-127,-127,81,49,97,2,-81,62,-17,75,120,85,107,122,-127, -86,-114,-127,-100,-39,127,127,-122,83,74,127,-127,101,127,69,-127,55,-103,-127,-127,-127,127,-127,127,-123,127,127,-127,-127,127,-7,-113,-127,-108,42,125,127,125,-30,-127,99,-102,127,127,127,-11,127,120, -63,-59,-123,127,82,-36,72,-27,66,33,4,-66,7,64,84,-56,-17,-2,-18,-62,-89,22,-81,-25,-127,49,34,-93,-51,45,127,-82,-72,4,58,77,95,76,-27,-60,47,127,74,25,55,-54,21,35, 
  /* [0][2][][] */ -127,-11,15,16,-51,-34,13,-56,31,-40,21,-43,4,23,-54,-22,-82,-21,86,-41,-1,13,-40,-19,-17,69,63,-18,55,65,-8,-7,1,-82,-46,45,21,32,-74,-29,15,-9,47,62,33,58,13,-80, -106,-13,-45,-70,95,45,58,-63,111,28,-38,-67,0,48,-118,-84,40,9,40,-58,-26,4,-49,50,-62,82,64,-50,57,10,-26,-35,-78,-26,-64,60,25,27,-127,-57,22,-45,84,81,48,-113,15,2, -21,-11,-33,-22,-16,-7,35,-33,-60,22,-24,-19,-10,14,27,-39,32,42,-3,-47,-53,1,-20,-34,-62,11,15,-30,18,-54,61,-32,-117,27,19,45,30,23,-48,-24,-4,44,23,24,25,-4,2,44, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0033477451652288437, 0.0033716857433319092, 0.0069946707226336002, 0.0080654118210077286, 0.037486698478460312, 0.0056441663764417171, 0.0072239101864397526, 0.0041919560171663761, 0.0052397060208022594, 0.0032034660689532757, 0.0028228224255144596, 0.0022457260638475418, 0.0035638723056763411, 0.002646994311362505, 0.012135546654462814, 0.0059636663645505905, 0.0058858282864093781, 0.012587280012667179, 0.0071376971900463104, 0.0056309793144464493, 0.0052258246578276157, 0.016650034114718437, 0.0054647745564579964, 0.011707063764333725, 0.0054831202141940594, 0.0020878659561276436, 0.0028151092119514942, 0.0034701619297266006, 0.0048974901437759399, 0.032857008278369904, 0.01024900283664465, 0.0030731689184904099, 0.0043033924885094166, 0.0055181966163218021, 0.0076692220754921436, 0.0030453733634203672, 0.0036197418812662363, 0.0024919710122048855, 0.0063116229139268398, 0.0022583517711609602, 0.0064019323326647282, 0.0054837116040289402, 0.0026881613302975893, 0.00356720807030797, 0.0033775260671973228, 0.018149947747588158, 0.0024023307487368584, 0.0085396738722920418, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1343, -462, -532, 1374, 23139, 1869, -418, 4649, 1456, 1343, 311, 3103, 1533, 489, -703, 825, 3384, 10951, 3149, -708, 1241, -1488, -89, 2412, -373, -546, 1660, -3, 3455, 11535, 2238, -139, 538, -185, 2315, 110, 382, -182, 1408, 1297, 1589, 2369, 170, -323, 598, 2171, 1129, -280, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00039534948882646859, 0.00036254216684028506, 0.00027770877932198346, 0.00028714683139696717, 4.6280743845272809e-05, 0.00033217587042599916, 0.0005484843859449029, 0.00019712095672730356, 0.00030672986758872867, 0.00048927421448752284, 0.00031440841848962009, 0.00030153748230077326, 0.00019594498735386878, 0.00034664536360651255, 0.00034832992241717875, 0.00027099790167994797, 0.00022668493329547346, 8.3806786278728396e-05, 0.00024448017938993871, 0.00036598843871615827, 0.00037452741526067257, 0.00017950912297237664, 0.00044212336069904268, 0.00030915482784621418, 0.00040949750109575689, 0.00082350929733365774, 0.00031352831865660846, 0.0010195763316005468, 0.00023006630362942815, 8.4041632362641394e-05, 0.0003224233805667609, 0.00066269177477806807, 0.00039651730912737548, 0.00035809370456263423, 0.00030116716516204178, 0.0003350350889377296, 0.00046538849710486829, 0.00055459374561905861, 0.00034356038668192923, 0.000456940324511379, 0.00034447797224856913, 0.00029209116473793983, 0.00031866037170402706, 0.00043048185762017965, 0.00042027258314192295, 0.00023317206068895757, 0.00027460962883196771, 0.00029424921376630664, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -32,34,1,-11,-77,-41,-127,31, 
  /* [1][0][][] */ 93,-83,-58,-59,127,-84,98,19, 
  /* [2][0][][] */ -86,122,-56,-127,45,-8,-36,45, 
  /* [3][0][][] */ 58,20,105,6,102,118,127,-14, 
  /* [4][0][][] */ -74,-127,63,17,-53,-121,4,-37, 
  /* [5][0][][] */ 127,-31,57,54,-80,-2,13,-19, 
  /* [6][0][][] */ 29,32,127,-35,38,-33,-41,22, 
  /* [7][0][][] */ 33,2,-127,-26,-39,94,98,-72, 
  /* [8][0][][] */ -12,127,-41,10,71,85,41,53, 
  /* [9][0][][] */ -15,127,-75,85,31,-98,48,106, 
  /* [10][0][][] */ 1,-127,-8,-36,-80,-123,-62,-76, 
  /* [11][0][][] */ -127,-82,103,49,-16,-71,96,63, 
  /* [12][0][][] */ -28,45,-127,76,29,-57,-86,102, 
  /* [13][0][][] */ 83,-127,90,74,4,30,37,-56, 
  /* [14][0][][] */ -33,80,-16,-127,-21,-81,-16,-72, 
  /* [15][0][][] */ 33,127,19,-24,43,-68,110,-115, 
  /* [16][0][][] */ -101,-127,-53,114,-54,31,-6,76, 
  /* [17][0][][] */ -9,-120,-127,88,-79,79,-71,84, 
  /* [18][0][][] */ -98,-91,-58,86,-19,75,2,127, 
  /* [19][0][][] */ 59,-117,92,-127,16,-67,27,-26, 
  /* [20][0][][] */ -2,74,43,4,45,127,63,-9, 
  /* [21][0][][] */ 26,114,48,-35,39,-69,96,-127, 
  /* [22][0][][] */ 20,15,101,18,-13,127,30,-32, 
  /* [23][0][][] */ -90,-67,32,-72,82,105,-54,-127, 
  /* [24][0][][] */ -100,-101,34,-83,121,121,-56,-127, 
  /* [25][0][][] */ 127,12,-59,-14,19,34,-60,-9, 
  /* [26][0][][] */ -127,-35,-122,-30,-54,-33,17,1, 
  /* [27][0][][] */ 80,32,-1,-58,-127,-27,83,93, 
  /* [28][0][][] */ -127,-90,12,70,-100,-106,10,-9, 
  /* [29][0][][] */ 93,97,28,-127,24,16,-47,-85, 
  /* [30][0][][] */ -77,-69,28,-64,60,86,-39,-127, 
  /* [31][0][][] */ 53,39,-9,127,-5,-64,-2,17, 
  /* [32][0][][] */ -29,127,-2,37,28,70,-13,43, 
  /* [33][0][][] */ -37,127,-81,30,17,-33,-30,6, 
  /* [34][0][][] */ -126,-127,-41,126,-6,16,17,106, 
  /* [35][0][][] */ -56,127,-33,-9,78,107,59,59, 
  /* [36][0][][] */ 79,38,6,-55,-127,-33,113,125, 
  /* [37][0][][] */ -59,116,25,28,-127,105,-26,-108, 
  /* [38][0][][] */ 37,40,24,18,127,76,107,65, 
  /* [39][0][][] */ -20,-68,39,-19,9,39,-109,127, 
  /* [40][0][][] */ -75,-51,-74,127,-30,-1,7,67, 
  /* [41][0][][] */ 127,19,66,106,-46,-16,-16,-15, 
  /* [42][0][][] */ -38,-1,-68,-127,45,-108,1,80, 
  /* [43][0][][] */ 28,-12,91,-1,32,127,94,6, 
  /* [44][0][][] */ -23,-24,-62,127,49,12,-39,-37, 
  /* [45][0][][] */ 60,127,118,-126,48,-44,34,-118, 
  /* [46][0][][] */ -38,-126,-49,35,-11,39,-70,127, 
  /* [47][0][][] */ 51,38,125,9,90,127,116,-17, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0041283653117716312, 0.003785780631005764, 0.0028999235946685076, 0.0029984784778207541, 0.00048327827244065702, 0.0034686862491071224, 0.0057274485006928444, 0.0020583998411893845, 0.0032029708381742239, 0.0051091569475829601, 0.0032831528224050999, 0.003148750402033329, 0.0020461198873817921, 0.0036197812296450138, 0.0036373718176037073, 0.0028298464603722095, 0.0023671162780374289, 0.00087513710604980588, 0.0025529398117214441, 0.0038217678666114807, 0.0039109345525503159, 0.0018744913395494223, 0.0046167927794158459, 0.0032282932661473751, 0.0042761033400893211, 0.0085993465036153793, 0.0032739625312387943, 0.010646740905940533, 0.0024024255108088255, 0.00087758951121941209, 0.0033668475225567818, 0.0069200387224555016, 0.0041405600495636463, 0.0037393283564597368, 0.0031448833178728819, 0.0034985430538654327, 0.0048597347922623158, 0.005791244562715292, 0.0035875670146197081, 0.0047715161927044392, 0.0035971486940979958, 0.0030501089058816433, 0.0033275529276579618, 0.0044952286407351494, 0.0043886201456189156, 0.0024348569568246603, 0.0028675610665231943, 0.0030726438853889704, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -6724, -2358, 11888, -10768, 23762, 7267, -8486, 11218, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0001640382397454232, 0.00021268500131554902, 0.00016977083578240126, 0.00023406746913678944, 0.0001678861299296841, 0.00016881262126844376, 0.00014456182543653995, 0.00025167092098854482, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -12,-14,-21,-73,-28,-38,19,-24,36,8,-33,-8,106,127,-19,-98, 
  /* [1][0][][] */ 127,-57,-48,13,-47,67,-67,-46,-44,83,-37,-53,-16,-1,-65,-17, 
  /* [2][0][][] */ -36,-93,38,46,45,-65,-78,-18,27,-91,27,-127,44,-23,-71,27, 
  /* [3][0][][] */ 38,8,16,16,-13,74,-50,-20,127,44,11,18,7,-14,8,20, 
  /* [4][0][][] */ -96,-28,-28,-127,-12,37,52,-120,28,-22,-48,-36,-123,29,-34,-24, 
  /* [5][0][][] */ 87,52,68,-31,51,-44,-126,-127,-10,-75,62,50,-54,53,59,-43, 
  /* [6][0][][] */ 100,42,-127,-82,30,-79,13,-89,-44,23,-126,92,94,-99,10,82, 
  /* [7][0][][] */ -127,-10,98,-23,-63,6,0,-54,-51,61,87,-36,61,-23,27,26, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0069716251455247402, 0.0090391123667359352, 0.0072152605280280113, 0.0099478671327233315, 0.0071351602673530579, 0.007174536120146513, 0.0061438777483999729, 0.010696014389395714, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 27437, -775, -151, 3045, -991, 289, 9426, 1257, 432, 364, -2155, 2651, -1384, -336, -379, -1294, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 8.4307772340252995e-05, 0.00021215436572674662, 0.00018432078650221229, 0.00018354425264988095, 0.0011102050775662065, 0.00089241057867184281, 0.00017051749455276877, 0.00086727371672168374, 0.00026992111816070974, 0.0012299565132707357, 0.00020311166008468717, 0.00020936295913998038, 0.00011047157749999315, 0.00035124743590131402, 0.0002046016015810892, 0.00056747766211628914, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 3,-3,5,7,-19,11,8,16,-6,-12,4,-6,-2,-9,-3,2, 6,0,-1,4,14,-2,8,-26,-9,8,2,92,-5,21,6,3, 5,-6,-5,4,3,-13,-2,11,-1,1,1,-10,6,-5,-3,2, 
  /* [0][1][][] */ 10,-10,1,8,127,-24,-127,-21,127,127,2,1,107,-27,-4,-15, -127,127,127,2,-87,-91,-16,-102,15,-106,127,127,127,127,127,127, 20,-4,-12,2,-10,127,3,-10,-3,-13,-8,-3,15,-6,-12,-5, 
  /* [0][2][][] */ -4,1,1,-17,-18,16,59,7,-7,-8,1,1,-5,-2,-3,-7, 15,-15,-7,-127,6,-16,-10,127,-6,1,-2,-12,-9,-61,-10,-32, -1,-3,-5,-3,2,-4,0,-2,-1,1,-4,3,6,-8,-9,-8, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0035830801352858543, 0.0090165603905916214, 0.0078336335718631744, 0.007800630759447813, 0.047183714807033539, 0.037927448749542236, 0.0072469934821128845, 0.036859132349491119, 0.011471647769212723, 0.052273150533437729, 0.0086322454735636711, 0.0088979257270693779, 0.0046950420364737511, 0.014928015880286694, 0.0086955679580569267, 0.024117801338434219, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -279, 153, 125, 664, 49060, 51090, 4442, 9672, 4196, 8940, 514, 74, 4565, 11608, -254, 23690, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00023122275888454169, 0.0012038333807140589, 0.00031075716833584011, 0.0001795765565475449, 2.8543114240164869e-05, 2.8891863621538505e-05, 0.00015769620949868113, 3.4628785215318203e-05, 0.00021257316984701902, 3.9175636629806831e-05, 0.00048633819096721709, 0.001187947578728199, 0.00033771627931855619, 1.7074475181289017e-05, 0.00090461107902228832, 4.4358119339449331e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -81, -105, -28, 
  /* [0][1][][] */ 68, -34, 18, 
  /* [0][2][][] */ 34, 127, 21, 
  /* [1][0][][] */ 105, -94, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 13, -1, -13, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 96, 127, 
  /* [2][2][][] */ -12, -94, -80, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 24, -53, 1, 
  /* [4][1][][] */ 21, -127, -2, 
  /* [4][2][][] */ 11, -86, -15, 
  /* [5][0][][] */ -70, 20, -7, 
  /* [5][1][][] */ -127, 25, -4, 
  /* [5][2][][] */ -86, 17, -7, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -51, 55, -16, 
  /* [6][2][][] */ -37, -52, -89, 
  /* [7][0][][] */ 28, 17, -26, 
  /* [7][1][][] */ 127, 65, -12, 
  /* [7][2][][] */ 36, 9, -18, 
  /* [8][0][][] */ -21, -30, 52, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -27, -61, 96, 
  /* [9][0][][] */ -22, 54, -11, 
  /* [9][1][][] */ -13, 127, -15, 
  /* [9][2][][] */ -1, 91, -7, 
  /* [10][0][][] */ 26, 89, 12, 
  /* [10][1][][] */ -36, -127, -29, 
  /* [10][2][][] */ 12, 41, 18, 
  /* [11][0][][] */ 6, -19, 9, 
  /* [11][1][][] */ 64, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 50, -9, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -78, 80, 6, 
  /* [13][0][][] */ 88, 30, -2, 
  /* [13][1][][] */ 127, 100, -6, 
  /* [13][2][][] */ 77, 102, 38, 
  /* [14][0][][] */ -30, -27, 49, 
  /* [14][1][][] */ 45, 100, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -81, -22, 19, 
  /* [15][1][][] */ -127, -114, 19, 
  /* [15][2][][] */ -23, -69, -6, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.062129173427820206, 0.32346802949905396, 0.083499938249588013, 0.048251923173666, 0.007669487502425909, 0.0077631957828998566, 0.042372711002826691, 0.0093046976253390312, 0.057118058204650879, 0.010526428930461407, 0.13067826628684998, 0.31919953227043152, 0.090743802487850189, 0.0045878831297159195, 0.24306750297546387, 0.011918953619897366, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.095764175057411194, } };
const TfArray<1, int> quant46_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.063122980296611786, } };
const TfArray<1, int> quant50_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.07250773161649704, } };
const TfArray<1, int> quant53_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.084562055766582489, } };
const TfArray<1, int> quant54_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.06919330358505249, } };
const TfArray<1, int> quant58_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.061111699789762497, } };
const TfArray<1, int> quant61_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.080410942435264587, } };
const TfArray<1, int> quant62_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.068678513169288635, } };
const TfArray<1, int> quant65_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.13408176600933075, } };
const TfArray<1, int> quant66_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,15,15,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.082521788775920868, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,15,15,13 } };
const TfArray<1, float> quant69_scale = { 1, { 0.15685178339481354, } };
const TfArray<1, int> quant69_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,15,15,13 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 52, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension44, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension46, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension47, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension50, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension51, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension53, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension55, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 56928, (TfLiteIntArray*)&tensor_dimension58, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension59, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension61, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension62, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension63, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25200, (TfLiteIntArray*)&tensor_dimension65, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension66, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension68, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2928, (TfLiteIntArray*)&tensor_dimension69, 2925, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 2925, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
